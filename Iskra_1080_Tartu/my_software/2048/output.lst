0001   0000                 device zxspectrum48
0002   0000                org 100h
0003   0100             begin: 
0004   0100             entry: 
0005   0100             main: 
0006   0100             ; 322  main(int argc, char *argv[]) {
0007   0100             	; Stack correction reset
0008   0100 22 4D 0C    	ld (main_2_a), hl
0009   0103             
0010   0103 31 00 90    		ld sp, 9000h
0011   0106 21 00 00    		ld hl, 0
0012   0109 E5          		push hl
0013   010A             	
0014   010A             ; 323 	asm {
0015   010A             ; 324 		ld sp, 9000h
0016   010A             ; 325 		ld hl, 0
0017   010A             ; 326 		push hl
0018   010A             ; 327 	}
0019   010A             ; 328 	char c;
0020   010A             ; 329 	bool success;
0021   010A             ; 330 
0022   010A             ; 331     // TODO: if (argc == 2 && strcmp(argv[1],"test")==0) {
0023   010A             ; 332     // TODO: 	return test();
0024   010A             ; 333     // TODO: }
0025   010A             ; 334 
0026   010A             ; 335 	initBoard();
0027   010A CD 3C 02    	call initBoard
0028   010D             l_0: 
0029   010D             ; 336 	while (true) {
0030   010D             ; 337 		c=getchar();
0031   010D CD 95 02    	call getchar
0032   0110 7D          	ld a, l
0033   0111 32 6C 0C    	ld (main_s + 0), a
0034   0114             ; 338 		if (c == 27) {
0035   0114 FE 1B       	cp 27
0036   0116 C2 60 01    	jp nz, l_2
0037   0119             ; 339     		c = getchar();
0038   0119 CD 95 02    	call getchar
0039   011C 7D          	ld a, l
0040   011D 32 6C 0C    	ld (main_s + 0), a
0041   0120             ; 340     		if (c == '[') {
0042   0120 FE 5B       	cp 91
0043   0122 C2 60 01    	jp nz, l_4
0044   0125             ; 341         		c = getchar();
0045   0125 CD 95 02    	call getchar
0046   0128 7D          	ld a, l
0047   0129 32 6C 0C    	ld (main_s + 0), a
0048   012C             ; 342 		        switch(c) {
0049   012C D6 41       	sub 65
0050   012E CA 40 01    	jp z, l_10
0051   0131 3D          	dec a
0052   0132 CA 48 01    	jp z, l_9
0053   0135 3D          	dec a
0054   0136 CA 58 01    	jp z, l_7
0055   0139 3D          	dec a
0056   013A CA 50 01    	jp z, l_8
0057   013D C3 0D 01    	jp l_0
0058   0140             l_10: 
0059   0140             ; 343 			        case 'A':
0060   0140             ; 344 			            c = 'W';
0061   0140 3E 57       	ld a, 87
0062   0142 32 6C 0C    	ld (main_s + 0), a
0063   0145 C3 60 01    	jp l_6
0064   0148             l_9: 
0065   0148             ; 345 			            break;
0066   0148             ; 346 			        case 'B':
0067   0148             ; 347 			            c = 'S';
0068   0148 3E 53       	ld a, 83
0069   014A 32 6C 0C    	ld (main_s + 0), a
0070   014D C3 60 01    	jp l_6
0071   0150             l_8: 
0072   0150             ; 348 			            break;
0073   0150             ; 349 			        case 'D':
0074   0150             ; 350 			            c = 'A';
0075   0150 3E 41       	ld a, 65
0076   0152 32 6C 0C    	ld (main_s + 0), a
0077   0155 C3 60 01    	jp l_6
0078   0158             l_7: 
0079   0158             ; 351 			            break;
0080   0158             ; 352 			        case 'C':
0081   0158             ; 353 			            c = 'D';
0082   0158 3E 44       	ld a, 68
0083   015A 32 6C 0C    	ld (main_s + 0), a
0084   015D C3 60 01    	jp l_6
0085   0160             l_6: 
0086   0160             l_4: 
0087   0160             l_2: 
0088   0160             ; 354 			            break;
0089   0160             ; 355 			        default:
0090   0160             ; 356 			            continue;
0091   0160             ; 357 		        }
0092   0160             ; 358     		}
0093   0160             ; 359         }		
0094   0160             ; 360 		switch(c) {
0095   0160 D6 41       	sub 65
0096   0162 CA 8B 01    	jp z, l_19
0097   0165 D6 03       	sub 3
0098   0167 CA 94 01    	jp z, l_17
0099   016A D6 0F       	sub 15
0100   016C CA A6 01    	jp z, l_13
0101   016F D6 04       	sub 4
0102   0171 CA 9D 01    	jp z, l_15
0103   0174 D6 0A       	sub 10
0104   0176 CA 8B 01    	jp z, l_20
0105   0179 D6 03       	sub 3
0106   017B CA 94 01    	jp z, l_18
0107   017E D6 0F       	sub 15
0108   0180 CA A6 01    	jp z, l_14
0109   0183 D6 04       	sub 4
0110   0185 CA 9D 01    	jp z, l_16
0111   0188 C3 AF 01    	jp l_21
0112   018B             l_20: 
0113   018B             l_19: 
0114   018B             ; 361 			case 'a':
0115   018B             ; 362 			case 'A':
0116   018B             ; 363 				success = moveLeft();  break;
0117   018B CD 9C 02    	call moveLeft
0118   018E 32 6D 0C    	ld (main_s + 1), a
0119   0191 C3 B3 01    	jp l_12
0120   0194             l_18: 
0121   0194             l_17: 
0122   0194             ; 364 			case 'd':
0123   0194             ; 365 			case 'D':
0124   0194             ; 366 				success = moveRight(); break;
0125   0194 CD B2 02    	call moveRight
0126   0197 32 6D 0C    	ld (main_s + 1), a
0127   019A C3 B3 01    	jp l_12
0128   019D             l_16: 
0129   019D             l_15: 
0130   019D             ; 367 			case 'w':
0131   019D             ; 368 			case 'W':
0132   019D             ; 369 				success = moveUp();    break;
0133   019D CD C8 02    	call moveUp
0134   01A0 32 6D 0C    	ld (main_s + 1), a
0135   01A3 C3 B3 01    	jp l_12
0136   01A6             l_14: 
0137   01A6             l_13: 
0138   01A6             ; 370 			case 's':
0139   01A6             ; 371 			case 'S':
0140   01A6             ; 372 				success = moveDown();  break;
0141   01A6 CD FA 02    	call moveDown
0142   01A9 32 6D 0C    	ld (main_s + 1), a
0143   01AC C3 B3 01    	jp l_12
0144   01AF             l_21: 
0145   01AF             ; 373 			default: success = false;
0146   01AF             ; 24 ;
0147   01AF AF          	xor a
0148   01B0 32 6D 0C    	ld (main_s + 1), a
0149   01B3             l_12: 
0150   01B3             ; 375 ) {
0151   01B3 B7          	or a
0152   01B4 CA D8 01    	jp z, l_22
0153   01B7             ; 376 			drawBoard();
0154   01B7 CD 10 03    	call drawBoard
0155   01BA             ; 377 			sleep(2);
0156   01BA 21 02 00    	ld hl, 2
0157   01BD CD 02 04    	call sleep
0158   01C0             ; 378 			addRandom();
0159   01C0 CD 1E 04    	call addRandom
0160   01C3             ; 379 			drawBoard();
0161   01C3 CD 10 03    	call drawBoard
0162   01C6             ; 380 			if (gameEnded()) {
0163   01C6 CD F0 04    	call gameEnded
0164   01C9 B7          	or a
0165   01CA CA D8 01    	jp z, l_24
0166   01CD             ; 381 				printf("            GAME OVER          \n");
0167   01CD 21 94 0D    	ld hl, s_18
0168   01D0 E5          	push hl
0169   01D1 CD 22 05    	call printf
0170   01D4 C1          	pop bc
0171   01D5 C3 30 02    	jp l_1
0172   01D8             l_24: 
0173   01D8             l_22: 
0174   01D8             ; 382 				break;
0175   01D8             ; 383 			}
0176   01D8             ; 384 		}
0177   01D8             ; 385 		if (c=='q' || c=='Q') {
0178   01D8 3A 6C 0C    	ld a, (main_s + 0)
0179   01DB FE 71       	cp 113
0180   01DD CA E5 01    	jp z, l_28
0181   01E0 FE 51       	cp 81
0182   01E2 C2 01 02    	jp nz, l_26
0183   01E5             l_28: 
0184   01E5             ; 386 			printf("            QUIT? (y/n)         \n");
0185   01E5 21 B5 0D    	ld hl, s_19
0186   01E8 E5          	push hl
0187   01E9 CD 22 05    	call printf
0188   01EC C1          	pop bc
0189   01ED             ; 387 			c=getchar();
0190   01ED CD 95 02    	call getchar
0191   01F0 7D          	ld a, l
0192   01F1 32 6C 0C    	ld (main_s + 0), a
0193   01F4             ; 388 			if (c=='y' || c=='Y') {
0194   01F4 FE 79       	cp 121
0195   01F6 CA 30 02    	jp z, l_1
0196   01F9 FE 59       	cp 89
0197   01FB CA 30 02    	jp z, l_1
0198   01FE             ; 389 				break;
0199   01FE             ; 390 			}
0200   01FE             ; 391 			prepareScreen();
0201   01FE CD 50 05    	call prepareScreen
0202   0201             l_26: 
0203   0201             ; 392 		}
0204   0201             ; 393 		if (c=='r' || c=='R') {
0205   0201 3A 6C 0C    	ld a, (main_s + 0)
0206   0204 FE 72       	cp 114
0207   0206 CA 0E 02    	jp z, l_34
0208   0209 FE 52       	cp 82
0209   020B C2 0D 01    	jp nz, l_0
0210   020E             l_34: 
0211   020E             ; 394 			printf("          RESTART? (y/n)       \n");
0212   020E 21 D7 0D    	ld hl, s_20
0213   0211 E5          	push hl
0214   0212 CD 22 05    	call printf
0215   0215 C1          	pop bc
0216   0216             ; 395 			c=getchar();
0217   0216 CD 95 02    	call getchar
0218   0219 7D          	ld a, l
0219   021A 32 6C 0C    	ld (main_s + 0), a
0220   021D             ; 396 			if (c=='y' || c=='Y') {
0221   021D FE 79       	cp 121
0222   021F CA 27 02    	jp z, l_37
0223   0222 FE 59       	cp 89
0224   0224 C2 2A 02    	jp nz, l_35
0225   0227             l_37: 
0226   0227             ; 397 				initBoard();
0227   0227 CD 3C 02    	call initBoard
0228   022A             l_35: 
0229   022A             ; 398 			}
0230   022A             ; 399 			prepareScreen();
0231   022A CD 50 05    	call prepareScreen
0232   022D C3 0D 01    	jp l_0
0233   0230             l_1: 
0234   0230             ; 400 		}
0235   0230             ; 401 	}
0236   0230             ; 402 
0237   0230             ; 403 	printf(ESC_CLEAR_SCREEN);
0238   0230 21 8C 0D    	ld hl, s_7
0239   0233 E5          	push hl
0240   0234 CD 22 05    	call printf
0241   0237 C1          	pop bc
0242   0238 21 00 00    	ld hl, 0
0243   023B C9          	ret
0244   023C             initBoard: 
0245   023C             ; 246  initBoard() {
0246   023C             	; Stack correction reset
0247   023C             ; 247 	uint8_t x,y;
0248   023C             ; 248 	for (x=0;x<SIZE;x++) {
0249   023C AF          	xor a
0250   023D 32 6E 0C    	ld (initBoard_s + 0), a
0251   0240             l_38: 
0252   0240 3A 6E 0C    	ld a, (initBoard_s + 0)
0253   0243 FE 04       	cp 4
0254   0245 D2 7C 02    	jp nc, l_40
0255   0248             ; 249 		for (y=0;y<SIZE;y++) {
0256   0248 AF          	xor a
0257   0249 32 6F 0C    	ld (initBoard_s + 1), a
0258   024C             l_41: 
0259   024C 3A 6F 0C    	ld a, (initBoard_s + 1)
0260   024F FE 04       	cp 4
0261   0251 D2 72 02    	jp nc, l_43
0262   0254             ; 250 			board[x][y]=0;
0263   0254 2A 6E 0C    	ld hl, (initBoard_s + 0)
0264   0257 26 00       	ld h, 0
0265   0259 29          	add hl, hl
0266   025A 29          	add hl, hl
0267   025B 11 2A 0C    	ld de, board
0268   025E 19          	add hl, de
0269   025F EB          	ex hl, de
0270   0260 2A 6F 0C    	ld hl, (initBoard_s + 1)
0271   0263 26 00       	ld h, 0
0272   0265 19          	add hl, de
0273   0266 36 00       	ld (hl), 0
0274   0268             l_42: 
0275   0268 3A 6F 0C    	ld a, (initBoard_s + 1)
0276   026B 3C          	inc a
0277   026C 32 6F 0C    	ld (initBoard_s + 1), a
0278   026F C3 4C 02    	jp l_41
0279   0272             l_43: 
0280   0272             l_39: 
0281   0272 3A 6E 0C    	ld a, (initBoard_s + 0)
0282   0275 3C          	inc a
0283   0276 32 6E 0C    	ld (initBoard_s + 0), a
0284   0279 C3 40 02    	jp l_38
0285   027C             l_40: 
0286   027C             ; 251 		}
0287   027C             ; 252 	}
0288   027C             ; 253     addRandom();
0289   027C CD 1E 04    	call addRandom
0290   027F             ; 254     addRandom();
0291   027F CD 1E 04    	call addRandom
0292   0282             ; 255     prepareScreen();
0293   0282 CD 50 05    	call prepareScreen
0294   0285             ; 256     score = 0;
0295   0285 11 00 00    	ld de, 0
0296   0288 21 00 00    	ld hl, 0
0297   028B 22 26 0C    	ld (score), hl
0298   028E EB          	ex hl, de
0299   028F 22 28 0C    	ld ((score) + 2), hl
0300   0292             ; 257     drawBoard();
0301   0292 C3 10 03    	jp drawBoard
0302   0295             getchar: 
0303   0295             ; 40  __fastcall getchar() {
0304   0295             	; Stack correction reset
0305   0295             ; 41     return cpmBiosConIn();
0306   0295 CD 14 06    	call cpmBiosConIn
0307   0298 6F          	ld l, a
0308   0299 26 00       	ld h, 0
0309   029B C9          	ret
0310   029C             moveLeft: 
0311   029C             ; 150  moveLeft() {
0312   029C             	; Stack correction reset
0313   029C             ; 151 	bool success;
0314   029C             ; 152 	rotateBoard();
0315   029C CD 1B 06    	call rotateBoard
0316   029F             ; 153 	success = moveUp();
0317   029F CD C8 02    	call moveUp
0318   02A2 32 70 0C    	ld (moveLeft_s + 0), a
0319   02A5             ; 154 	rotateBoard();
0320   02A5 CD 1B 06    	call rotateBoard
0321   02A8             ; 155 	rotateBoard();
0322   02A8 CD 1B 06    	call rotateBoard
0323   02AB             ; 156 	rotateBoard();
0324   02AB CD 1B 06    	call rotateBoard
0325   02AE             ; 157 	return success;
0326   02AE 3A 70 0C    	ld a, (moveLeft_s + 0)
0327   02B1 C9          	ret
0328   02B2             moveRight: 
0329   02B2             ; 170  moveRight() {
0330   02B2             	; Stack correction reset
0331   02B2             ; 171 	bool success;
0332   02B2             ; 172 	rotateBoard();
0333   02B2 CD 1B 06    	call rotateBoard
0334   02B5             ; 173 	rotateBoard();
0335   02B5 CD 1B 06    	call rotateBoard
0336   02B8             ; 174 	rotateBoard();
0337   02B8 CD 1B 06    	call rotateBoard
0338   02BB             ; 175 	success = moveUp();
0339   02BB CD C8 02    	call moveUp
0340   02BE 32 71 0C    	ld (moveRight_s + 0), a
0341   02C1             ; 176 	rotateBoard();
0342   02C1 CD 1B 06    	call rotateBoard
0343   02C4             ; 177 	return success;
0344   02C4 3A 71 0C    	ld a, (moveRight_s + 0)
0345   02C7 C9          	ret
0346   02C8             moveUp: 
0347   02C8             ; 141  moveUp() {
0348   02C8             	; Stack correction reset
0349   02C8             ; 142 	bool success = false;
0350   02C8             ; 24 ;
0351   02C8 AF          	xor a
0352   02C9 32 72 0C    	ld (moveUp_s + 0), a
0353   02CC             ; 144 =0;x<SIZE;x++) {
0354   02CC 32 73 0C    	ld (moveUp_s + 1), a
0355   02CF             l_44: 
0356   02CF 3A 73 0C    	ld a, (moveUp_s + 1)
0357   02D2 FE 04       	cp 4
0358   02D4 D2 F6 02    	jp nc, l_46
0359   02D7             ; 145 		success |= slideArray(board[x]);
0360   02D7 2A 73 0C    	ld hl, (moveUp_s + 1)
0361   02DA 26 00       	ld h, 0
0362   02DC 29          	add hl, hl
0363   02DD 29          	add hl, hl
0364   02DE 11 2A 0C    	ld de, board
0365   02E1 19          	add hl, de
0366   02E2 CD 64 07    	call slideArray
0367   02E5 21 72 0C    	ld hl, moveUp_s + 0
0368   02E8 B6          	or (hl)
0369   02E9 32 72 0C    	ld (moveUp_s + 0), a
0370   02EC             l_45: 
0371   02EC 3A 73 0C    	ld a, (moveUp_s + 1)
0372   02EF 3C          	inc a
0373   02F0 32 73 0C    	ld (moveUp_s + 1), a
0374   02F3 C3 CF 02    	jp l_44
0375   02F6             l_46: 
0376   02F6             ; 146 	}
0377   02F6             ; 147 	return success;
0378   02F6 3A 72 0C    	ld a, (moveUp_s + 0)
0379   02F9 C9          	ret
0380   02FA             moveDown: 
0381   02FA             ; 160  moveDown() {
0382   02FA             	; Stack correction reset
0383   02FA             ; 161 	bool success;
0384   02FA             ; 162 	rotateBoard();
0385   02FA CD 1B 06    	call rotateBoard
0386   02FD             ; 163 	rotateBoard();
0387   02FD CD 1B 06    	call rotateBoard
0388   0300             ; 164 	success = moveUp();
0389   0300 CD C8 02    	call moveUp
0390   0303 32 74 0C    	ld (moveDown_s + 0), a
0391   0306             ; 165 	rotateBoard();
0392   0306 CD 1B 06    	call rotateBoard
0393   0309             ; 166 	rotateBoard();
0394   0309 CD 1B 06    	call rotateBoard
0395   030C             ; 167 	return success;
0396   030C 3A 74 0C    	ld a, (moveDown_s + 0)
0397   030F C9          	ret
0398   0310             drawBoard: 
0399   0310             ; 31  drawBoard() {
0400   0310             	; Stack correction reset
0401   0310             ; 32 	uint8_t x,y;
0402   0310             ; 33 	uint8_t t;
0403   0310             ; 34     printf(ESC_HOME_CURSOR);
0404   0310 21 88 0D    	ld hl, s_0
0405   0313 E5          	push hl
0406   0314 CD 22 05    	call printf
0407   0317 C1          	pop bc
0408   0318             ; 36 "2048.c %23d pts",score);
0409   0318 2A 28 0C    	ld hl, (((score) + 2))
0410   031B EB          	ex hl, de
0411   031C 2A 26 0C    	ld hl, (score)
0412   031F D5          	push de
0413   0320 E5          	push hl
0414   0321 21 19 0E    	ld hl, s_1
0415   0324 E5          	push hl
0416   0325 CD 22 05    	call printf
0417   0328 C1          	pop bc
0418   0329 C1          	pop bc
0419   032A C1          	pop bc
0420   032B             ; 37     for (y=0;y<SIZE;y++) {
0421   032B AF          	xor a
0422   032C 32 76 0C    	ld (drawBoard_s + 1), a
0423   032F             l_47: 
0424   032F 3A 76 0C    	ld a, (drawBoard_s + 1)
0425   0332 FE 04       	cp 4
0426   0334 D2 F9 03    	jp nc, l_49
0427   0337             ; 38         printf("\n\n\n\n");
0428   0337 21 61 0D    	ld hl, s_2
0429   033A E5          	push hl
0430   033B CD 22 05    	call printf
0431   033E C1          	pop bc
0432   033F             ; 39         for (x=0;x<SIZE;x++) {
0433   033F AF          	xor a
0434   0340 32 75 0C    	ld (drawBoard_s + 0), a
0435   0343             l_50: 
0436   0343 3A 75 0C    	ld a, (drawBoard_s + 0)
0437   0346 FE 04       	cp 4
0438   0348 D2 EF 03    	jp nc, l_52
0439   034B             ; 40             if (board[x][y]!=0) {
0440   034B 2A 75 0C    	ld hl, (drawBoard_s + 0)
0441   034E 26 00       	ld h, 0
0442   0350 29          	add hl, hl
0443   0351 29          	add hl, hl
0444   0352 11 2A 0C    	ld de, board
0445   0355 19          	add hl, de
0446   0356 EB          	ex hl, de
0447   0357 2A 76 0C    	ld hl, (drawBoard_s + 1)
0448   035A 26 00       	ld h, 0
0449   035C 19          	add hl, de
0450   035D 7E          	ld a, (hl)
0451   035E B7          	or a
0452   035F CA DD 03    	jp z, l_53
0453   0362             ; 41                 char s[8];
0454   0362             ; 42                 snprintf(s,8,"%u",1<<board[x][y]);
0455   0362 2A 75 0C    	ld hl, (drawBoard_s + 0)
0456   0365 26 00       	ld h, 0
0457   0367 29          	add hl, hl
0458   0368 29          	add hl, hl
0459   0369 11 2A 0C    	ld de, board
0460   036C 19          	add hl, de
0461   036D EB          	ex hl, de
0462   036E 2A 76 0C    	ld hl, (drawBoard_s + 1)
0463   0371 26 00       	ld h, 0
0464   0373 19          	add hl, de
0465   0374 6E          	ld l, (hl)
0466   0375 26 00       	ld h, 0
0467   0377 11 01 00    	ld de, 1
0468   037A EB          	ex hl, de
0469   037B CD 15 0D    	call __o_shl_16
0470   037E E5          	push hl
0471   037F 21 F8 0D    	ld hl, s_3
0472   0382 E5          	push hl
0473   0383 21 08 00    	ld hl, 8
0474   0386 E5          	push hl
0475   0387 21 78 0C    	ld hl, drawBoard_s + 3
0476   038A E5          	push hl
0477   038B CD 48 08    	call snprintf
0478   038E 21 08 00    	ld hl, 8
0479   0391 39          	add hl, sp
0480   0392 F9          	ld sp, hl
0481   0393             ; 43                 t = 7-strlen(s);
0482   0393 21 78 0C    	ld hl, drawBoard_s + 3
0483   0396 CD 86 08    	call strlen
0484   0399 7D          	ld a, l
0485   039A 57          	ld d, a
0486   039B 3E 07       	ld a, 7
0487   039D 92          	sub d
0488   039E 32 77 0C    	ld (drawBoard_s + 2), a
0489   03A1             ; 44                 printf("|%*s%s%*s",t-t/2,"",s,t/2,"");
0490   03A1 21 60 0D    	ld hl, s_5
0491   03A4 E5          	push hl
0492   03A5 2A 77 0C    	ld hl, (drawBoard_s + 2)
0493   03A8 26 00       	ld h, 0
0494   03AA 11 01 00    	ld de, 1
0495   03AD CD 1C 0D    	call __o_shr_u16
0496   03B0 E5          	push hl
0497   03B1 21 78 0C    	ld hl, drawBoard_s + 3
0498   03B4 E5          	push hl
0499   03B5 21 60 0D    	ld hl, s_5
0500   03B8 E5          	push hl
0501   03B9 2A 77 0C    	ld hl, (drawBoard_s + 2)
0502   03BC 26 00       	ld h, 0
0503   03BE 11 01 00    	ld de, 1
0504   03C1 CD 1C 0D    	call __o_shr_u16
0505   03C4 EB          	ex hl, de
0506   03C5 2A 77 0C    	ld hl, (drawBoard_s + 2)
0507   03C8 26 00       	ld h, 0
0508   03CA CD C6 0C    	call __o_sub_16
0509   03CD E5          	push hl
0510   03CE 21 35 0E    	ld hl, s_4
0511   03D1 E5          	push hl
0512   03D2 CD 22 05    	call printf
0513   03D5 21 0C 00    	ld hl, 12
0514   03D8 39          	add hl, sp
0515   03D9 F9          	ld sp, hl
0516   03DA C3 E5 03    	jp l_54
0517   03DD             l_53: 
0518   03DD             ; 45             } else {
0519   03DD             ; 46                 printf("|       ");
0520   03DD 21 2C 0E    	ld hl, s_6
0521   03E0 E5          	push hl
0522   03E1 CD 22 05    	call printf
0523   03E4 C1          	pop bc
0524   03E5             l_54: 
0525   03E5             l_51: 
0526   03E5 3A 75 0C    	ld a, (drawBoard_s + 0)
0527   03E8 3C          	inc a
0528   03E9 32 75 0C    	ld (drawBoard_s + 0), a
0529   03EC C3 43 03    	jp l_50
0530   03EF             l_52: 
0531   03EF             l_48: 
0532   03EF 3A 76 0C    	ld a, (drawBoard_s + 1)
0533   03F2 3C          	inc a
0534   03F3 32 76 0C    	ld (drawBoard_s + 1), a
0535   03F6 C3 2F 03    	jp l_47
0536   03F9             l_49: 
0537   03F9             ; 47             }
0538   03F9             ; 48         }
0539   03F9             ; 49     }
0540   03F9             ; 50     printf("\n\n\n\n");
0541   03F9 21 61 0D    	ld hl, s_2
0542   03FC E5          	push hl
0543   03FD CD 22 05    	call printf
0544   0400 C1          	pop bc
0545   0401 C9          	ret
0546   0402             sleep: 
0547   0402             ; 25  sleep(unsigned seconds) {
0548   0402             	; Stack correction reset
0549   0402 22 4F 0C    	ld (sleep_1_a), hl
0550   0405             l_55: 
0551   0405             ; 26     while (seconds != 0) {
0552   0405 2A 4F 0C    	ld hl, (sleep_1_a)
0553   0408 7C          	ld a, h
0554   0409 B5          	or l
0555   040A CA 1A 04    	jp z, l_56
0556   040D             ; 27         seconds--;
0557   040D 2B          	dec hl
0558   040E 22 4F 0C    	ld (sleep_1_a), hl
0559   0411             ; 28         Delay(C8080_SECOND_DELAY);
0560   0411 21 88 13    	ld hl, 5000
0561   0414 CD 95 08    	call Delay
0562   0417 C3 05 04    	jp l_55
0563   041A             l_56: 
0564   041A             ; 30 ;
0565   041A 21 00 00    	ld hl, 0
0566   041D C9          	ret
0567   041E             addRandom: 
0568   041E             ; 216  addRandom() {
0569   041E             	; Stack correction reset
0570   041E             ; 217 	static bool initialized = false;
0571   041E             ; 218 	uint8_t x,y;
0572   041E             ; 219 	uint8_t r,len=0;
0573   041E AF          	xor a
0574   041F 32 83 0C    	ld (addRandom_s + 3), a
0575   0422             ; 220 	uint8_t n,list[SIZE*SIZE][2];
0576   0422             ; 221 
0577   0422             ; 222 	if (!initialized) {
0578   0422 3A 3A 0C    	ld a, (initialized)
0579   0425 B7          	or a
0580   0426 C2 2E 04    	jp nz, l_57
0581   0429             ; 223 		//srand(time(NULL));
0582   0429             ; 224 		initialized = true;
0583   0429             ; 25 ;
0584   0429 3E 01       	ld a, 1
0585   042B 32 3A 0C    	ld (initialized), a
0586   042E             l_57: 
0587   042E             ; 227 =0;x<SIZE;x++) {
0588   042E AF          	xor a
0589   042F 32 80 0C    	ld (addRandom_s + 0), a
0590   0432             l_59: 
0591   0432 3A 80 0C    	ld a, (addRandom_s + 0)
0592   0435 FE 04       	cp 4
0593   0437 D2 92 04    	jp nc, l_61
0594   043A             ; 228 		for (y=0;y<SIZE;y++) {
0595   043A AF          	xor a
0596   043B 32 81 0C    	ld (addRandom_s + 1), a
0597   043E             l_62: 
0598   043E 3A 81 0C    	ld a, (addRandom_s + 1)
0599   0441 FE 04       	cp 4
0600   0443 D2 88 04    	jp nc, l_64
0601   0446             ; 229 			if (board[x][y]==0) {
0602   0446 2A 80 0C    	ld hl, (addRandom_s + 0)
0603   0449 26 00       	ld h, 0
0604   044B 29          	add hl, hl
0605   044C 29          	add hl, hl
0606   044D 11 2A 0C    	ld de, board
0607   0450 19          	add hl, de
0608   0451 EB          	ex hl, de
0609   0452 2A 81 0C    	ld hl, (addRandom_s + 1)
0610   0455 26 00       	ld h, 0
0611   0457 19          	add hl, de
0612   0458 7E          	ld a, (hl)
0613   0459 B7          	or a
0614   045A C2 7E 04    	jp nz, l_65
0615   045D             ; 230 				list[len][0]=x;
0616   045D 3A 80 0C    	ld a, (addRandom_s + 0)
0617   0460 2A 83 0C    	ld hl, (addRandom_s + 3)
0618   0463 26 00       	ld h, 0
0619   0465 29          	add hl, hl
0620   0466 11 85 0C    	ld de, addRandom_s + 5
0621   0469 19          	add hl, de
0622   046A 77          	ld (hl), a
0623   046B             ; 231 				list[len][1]=y;
0624   046B 3A 81 0C    	ld a, (addRandom_s + 1)
0625   046E 2A 83 0C    	ld hl, (addRandom_s + 3)
0626   0471 26 00       	ld h, 0
0627   0473 29          	add hl, hl
0628   0474 19          	add hl, de
0629   0475 23          	inc hl
0630   0476 77          	ld (hl), a
0631   0477             ; 232 				len++;
0632   0477 3A 83 0C    	ld a, (addRandom_s + 3)
0633   047A 3C          	inc a
0634   047B 32 83 0C    	ld (addRandom_s + 3), a
0635   047E             l_65: 
0636   047E             l_63: 
0637   047E 3A 81 0C    	ld a, (addRandom_s + 1)
0638   0481 3C          	inc a
0639   0482 32 81 0C    	ld (addRandom_s + 1), a
0640   0485 C3 3E 04    	jp l_62
0641   0488             l_64: 
0642   0488             l_60: 
0643   0488 3A 80 0C    	ld a, (addRandom_s + 0)
0644   048B 3C          	inc a
0645   048C 32 80 0C    	ld (addRandom_s + 0), a
0646   048F C3 32 04    	jp l_59
0647   0492             l_61: 
0648   0492             ; 233 			}
0649   0492             ; 234 		}
0650   0492             ; 235 	}
0651   0492             ; 236 
0652   0492             ; 237 	if (len>0) {
0653   0492 3A 83 0C    	ld a, (addRandom_s + 3)
0654   0495 B7          	or a
0655   0496 C8          	ret z
0656   0497             ; 238 		r = rand()%len;
0657   0497 CD A5 08    	call rand
0658   049A 6F          	ld l, a
0659   049B 26 00       	ld h, 0
0660   049D EB          	ex hl, de
0661   049E 2A 83 0C    	ld hl, (addRandom_s + 3)
0662   04A1 26 00       	ld h, 0
0663   04A3 EB          	ex hl, de
0664   04A4 CD 0D 0D    	call __o_mod_u16
0665   04A7 7D          	ld a, l
0666   04A8 32 82 0C    	ld (addRandom_s + 2), a
0667   04AB             ; 239 		x = list[r][0];
0668   04AB 2A 82 0C    	ld hl, (addRandom_s + 2)
0669   04AE 26 00       	ld h, 0
0670   04B0 29          	add hl, hl
0671   04B1 11 85 0C    	ld de, addRandom_s + 5
0672   04B4 19          	add hl, de
0673   04B5 7E          	ld a, (hl)
0674   04B6 32 80 0C    	ld (addRandom_s + 0), a
0675   04B9             ; 240 		y = list[r][1];
0676   04B9 2A 82 0C    	ld hl, (addRandom_s + 2)
0677   04BC 26 00       	ld h, 0
0678   04BE 29          	add hl, hl
0679   04BF 19          	add hl, de
0680   04C0 23          	inc hl
0681   04C1 7E          	ld a, (hl)
0682   04C2 32 81 0C    	ld (addRandom_s + 1), a
0683   04C5             ; 241 		n = (rand()%10)/9+1;
0684   04C5 CD A5 08    	call rand
0685   04C8 6F          	ld l, a
0686   04C9 26 00       	ld h, 0
0687   04CB 11 0A 00    	ld de, 10
0688   04CE CD 0D 0D    	call __o_mod_u16
0689   04D1 11 09 00    	ld de, 9
0690   04D4 CD D3 0C    	call __o_div_u16
0691   04D7 7D          	ld a, l
0692   04D8 3C          	inc a
0693   04D9 32 84 0C    	ld (addRandom_s + 4), a
0694   04DC             ; 242 		board[x][y]=n;
0695   04DC 2A 80 0C    	ld hl, (addRandom_s + 0)
0696   04DF 26 00       	ld h, 0
0697   04E1 29          	add hl, hl
0698   04E2 29          	add hl, hl
0699   04E3 11 2A 0C    	ld de, board
0700   04E6 19          	add hl, de
0701   04E7 EB          	ex hl, de
0702   04E8 2A 81 0C    	ld hl, (addRandom_s + 1)
0703   04EB 26 00       	ld h, 0
0704   04ED 19          	add hl, de
0705   04EE 77          	ld (hl), a
0706   04EF C9          	ret
0707   04F0             gameEnded: 
0708   04F0             ; 204  gameEnded() {
0709   04F0             	; Stack correction reset
0710   04F0             ; 205 	bool ended = true;
0711   04F0             ; 25 ;
0712   04F0 3E 01       	ld a, 1
0713   04F2 32 A5 0C    	ld (gameEnded_s + 0), a
0714   04F5             ; 206 )>0) return false;
0715   04F5 CD B0 08    	call countEmpty
0716   04F8 B7          	or a
0717   04F9 CA FE 04    	jp z, l_69
0718   04FC             ; 24 ;
0719   04FC AF          	xor a
0720   04FD C9          	ret
0721   04FE             l_69: 
0722   04FE             ; 207 )) return false;
0723   04FE CD 01 09    	call findPairDown
0724   0501 B7          	or a
0725   0502 CA 07 05    	jp z, l_71
0726   0505             ; 24 ;
0727   0505 AF          	xor a
0728   0506 C9          	ret
0729   0507             l_71: 
0730   0507             ; 208 );
0731   0507 CD 1B 06    	call rotateBoard
0732   050A             ; 209 	if (findPairDown()) ended = false;
0733   050A CD 01 09    	call findPairDown
0734   050D B7          	or a
0735   050E CA 15 05    	jp z, l_73
0736   0511             ; 24 ;
0737   0511 AF          	xor a
0738   0512 32 A5 0C    	ld (gameEnded_s + 0), a
0739   0515             l_73: 
0740   0515             ; 210 );
0741   0515 CD 1B 06    	call rotateBoard
0742   0518             ; 211 	rotateBoard();
0743   0518 CD 1B 06    	call rotateBoard
0744   051B             ; 212 	rotateBoard();
0745   051B CD 1B 06    	call rotateBoard
0746   051E             ; 213 	return ended;
0747   051E 3A A5 0C    	ld a, (gameEnded_s + 0)
0748   0521 C9          	ret
0749   0522             printf: 
0750   0522             ; 26  __stdcall printf(const char* format, ...) {
0751   0522 C5          	push bc
0752   0523             	; Stack correction reset
0753   0523             ; 1 /c8080/include/c8080/c8080.h
0754   0523 21 06 00    	ld hl, 6
0755   0526 39          	add hl, sp
0756   0527 EB          	ex hl, de
0757   0528 21 00 00    	ld hl, 0
0758   052B 39          	add hl, sp
0759   052C 73          	ld (hl), e
0760   052D 23          	inc hl
0761   052E 72          	ld (hl), d
0762   052F             ; 29  = printfOutConsole;
0763   052F 21 61 09    	ld hl, printfOutConsole
0764   0532 22 3B 0C    	ld (printfOut), hl
0765   0535             ; 30     printfInternal(format, va);
0766   0535 21 04 00    	ld hl, 4
0767   0538 39          	add hl, sp
0768   0539 5E          	ld e, (hl)
0769   053A 23          	inc hl
0770   053B 56          	ld d, (hl)
0771   053C EB          	ex hl, de
0772   053D 22 53 0C    	ld (printfInternal_1_a), hl
0773   0540 21 00 00    	ld hl, 0
0774   0543 39          	add hl, sp
0775   0544 5E          	ld e, (hl)
0776   0545 23          	inc hl
0777   0546 56          	ld d, (hl)
0778   0547 EB          	ex hl, de
0779   0548 CD 73 09    	call printfInternal
0780   054B             ; 31     va_end(va);
0781   054B             ; 32     return printfOutTotal;
0782   054B 2A 41 0C    	ld hl, (printfOutTotal)
0783   054E C1          	pop bc
0784   054F C9          	ret
0785   0550             prepareScreen: 
0786   0550             ; 53  prepareScreen() {
0787   0550             	; Stack correction reset
0788   0550             ; 54     uint8_t x,y,i;
0789   0550             ; 55     printf(ESC_CLEAR_SCREEN);
0790   0550 21 8C 0D    	ld hl, s_7
0791   0553 E5          	push hl
0792   0554 CD 22 05    	call printf
0793   0557 C1          	pop bc
0794   0558             ; 57 "2048.c %17d pts\n\n",score);
0795   0558 2A 28 0C    	ld hl, (((score) + 2))
0796   055B EB          	ex hl, de
0797   055C 2A 26 0C    	ld hl, (score)
0798   055F D5          	push de
0799   0560 E5          	push hl
0800   0561 21 07 0E    	ld hl, s_8
0801   0564 E5          	push hl
0802   0565 CD 22 05    	call printf
0803   0568 C1          	pop bc
0804   0569 C1          	pop bc
0805   056A C1          	pop bc
0806   056B             ; 58     for (x=0;x<SIZE;x++)
0807   056B AF          	xor a
0808   056C 32 A6 0C    	ld (prepareScreen_s + 0), a
0809   056F             l_76: 
0810   056F 3A A6 0C    	ld a, (prepareScreen_s + 0)
0811   0572 FE 04       	cp 4
0812   0574 D2 89 05    	jp nc, l_78
0813   0577             ; 59         printf("+-------");
0814   0577 21 FE 0D    	ld hl, s_9
0815   057A E5          	push hl
0816   057B CD 22 05    	call printf
0817   057E C1          	pop bc
0818   057F             l_77: 
0819   057F 3A A6 0C    	ld a, (prepareScreen_s + 0)
0820   0582 3C          	inc a
0821   0583 32 A6 0C    	ld (prepareScreen_s + 0), a
0822   0586 C3 6F 05    	jp l_76
0823   0589             l_78: 
0824   0589             ; 60     printf("+\n");
0825   0589 21 FB 0D    	ld hl, s_10
0826   058C E5          	push hl
0827   058D CD 22 05    	call printf
0828   0590 C1          	pop bc
0829   0591             ; 61     for (y=0;y<SIZE;y++) {
0830   0591 AF          	xor a
0831   0592 32 A7 0C    	ld (prepareScreen_s + 1), a
0832   0595             l_79: 
0833   0595 3A A7 0C    	ld a, (prepareScreen_s + 1)
0834   0598 FE 04       	cp 4
0835   059A D2 09 06    	jp nc, l_81
0836   059D             ; 62         for (i=0;i<3;i++) {
0837   059D AF          	xor a
0838   059E 32 A8 0C    	ld (prepareScreen_s + 2), a
0839   05A1             l_82: 
0840   05A1 3A A8 0C    	ld a, (prepareScreen_s + 2)
0841   05A4 FE 03       	cp 3
0842   05A6 D2 D9 05    	jp nc, l_84
0843   05A9             ; 63             for (x=0;x<SIZE;x++)
0844   05A9 AF          	xor a
0845   05AA 32 A6 0C    	ld (prepareScreen_s + 0), a
0846   05AD             l_85: 
0847   05AD 3A A6 0C    	ld a, (prepareScreen_s + 0)
0848   05B0 FE 04       	cp 4
0849   05B2 D2 C7 05    	jp nc, l_87
0850   05B5             ; 64                 printf("|       ");
0851   05B5 21 2C 0E    	ld hl, s_6
0852   05B8 E5          	push hl
0853   05B9 CD 22 05    	call printf
0854   05BC C1          	pop bc
0855   05BD             l_86: 
0856   05BD 3A A6 0C    	ld a, (prepareScreen_s + 0)
0857   05C0 3C          	inc a
0858   05C1 32 A6 0C    	ld (prepareScreen_s + 0), a
0859   05C4 C3 AD 05    	jp l_85
0860   05C7             l_87: 
0861   05C7             ; 65             printf("|\n");
0862   05C7 21 29 0E    	ld hl, s_11
0863   05CA E5          	push hl
0864   05CB CD 22 05    	call printf
0865   05CE C1          	pop bc
0866   05CF             l_83: 
0867   05CF 3A A8 0C    	ld a, (prepareScreen_s + 2)
0868   05D2 3C          	inc a
0869   05D3 32 A8 0C    	ld (prepareScreen_s + 2), a
0870   05D6 C3 A1 05    	jp l_82
0871   05D9             l_84: 
0872   05D9             ; 66         }
0873   05D9             ; 67         for (x=0;x<SIZE;x++)
0874   05D9 AF          	xor a
0875   05DA 32 A6 0C    	ld (prepareScreen_s + 0), a
0876   05DD             l_88: 
0877   05DD 3A A6 0C    	ld a, (prepareScreen_s + 0)
0878   05E0 FE 04       	cp 4
0879   05E2 D2 F7 05    	jp nc, l_90
0880   05E5             ; 68             printf("+-------");
0881   05E5 21 FE 0D    	ld hl, s_9
0882   05E8 E5          	push hl
0883   05E9 CD 22 05    	call printf
0884   05EC C1          	pop bc
0885   05ED             l_89: 
0886   05ED 3A A6 0C    	ld a, (prepareScreen_s + 0)
0887   05F0 3C          	inc a
0888   05F1 32 A6 0C    	ld (prepareScreen_s + 0), a
0889   05F4 C3 DD 05    	jp l_88
0890   05F7             l_90: 
0891   05F7             ; 69         printf("+\n");
0892   05F7 21 FB 0D    	ld hl, s_10
0893   05FA E5          	push hl
0894   05FB CD 22 05    	call printf
0895   05FE C1          	pop bc
0896   05FF             l_80: 
0897   05FF 3A A7 0C    	ld a, (prepareScreen_s + 1)
0898   0602 3C          	inc a
0899   0603 32 A7 0C    	ld (prepareScreen_s + 1), a
0900   0606 C3 95 05    	jp l_79
0901   0609             l_81: 
0902   0609             ; 70     }
0903   0609             ; 71     printf("\n          w,a,s,d or r,q       \n");
0904   0609 21 66 0D    	ld hl, s_12
0905   060C E5          	push hl
0906   060D CD 22 05    	call printf
0907   0610 C1          	pop bc
0908   0611             ; 72     drawBoard();
0909   0611 C3 10 03    	jp drawBoard
0910   0614             cpmBiosConIn: 
0911   0614             ; 32  uint8_t __fastcall cpmBiosConIn() {
0912   0614             	; Stack correction reset
0913   0614             
0914   0614 2A 01 00            ld hl, (1)
0915   0617 2E 09               ld l, 09h
0916   0619 E9                  jp hl
0917   061A                 
0918   061A C9          	ret
0919   061B             rotateBoard: 
0920   061B             ; 127  rotateBoard() {
0921   061B             	; Stack correction reset
0922   061B             ; 128 	uint8_t i,j,n=SIZE;
0923   061B 3E 04       	ld a, 4
0924   061D 32 AB 0C    	ld (rotateBoard_s + 2), a
0925   0620             ; 130 =0; i<n/2; i++) {
0926   0620 AF          	xor a
0927   0621 32 A9 0C    	ld (rotateBoard_s + 0), a
0928   0624             l_91: 
0929   0624 2A AB 0C    	ld hl, (rotateBoard_s + 2)
0930   0627 26 00       	ld h, 0
0931   0629 11 01 00    	ld de, 1
0932   062C CD 1C 0D    	call __o_shr_u16
0933   062F EB          	ex hl, de
0934   0630 2A A9 0C    	ld hl, (rotateBoard_s + 0)
0935   0633 26 00       	ld h, 0
0936   0635 CD C6 0C    	call __o_sub_16
0937   0638 D0          	ret nc
0938   0639             ; 131 		for (j=i; j<n-i-1; j++) {
0939   0639 3A A9 0C    	ld a, (rotateBoard_s + 0)
0940   063C 32 AA 0C    	ld (rotateBoard_s + 1), a
0941   063F             l_94: 
0942   063F 2A A9 0C    	ld hl, (rotateBoard_s + 0)
0943   0642 26 00       	ld h, 0
0944   0644 EB          	ex hl, de
0945   0645 2A AB 0C    	ld hl, (rotateBoard_s + 2)
0946   0648 26 00       	ld h, 0
0947   064A CD C6 0C    	call __o_sub_16
0948   064D 2B          	dec hl
0949   064E EB          	ex hl, de
0950   064F 2A AA 0C    	ld hl, (rotateBoard_s + 1)
0951   0652 26 00       	ld h, 0
0952   0654 CD C6 0C    	call __o_sub_16
0953   0657 D2 5A 07    	jp nc, l_96
0954   065A             ; 132 			tmp = board[i][j];
0955   065A 2A A9 0C    	ld hl, (rotateBoard_s + 0)
0956   065D 26 00       	ld h, 0
0957   065F 29          	add hl, hl
0958   0660 29          	add hl, hl
0959   0661 11 2A 0C    	ld de, board
0960   0664 19          	add hl, de
0961   0665 EB          	ex hl, de
0962   0666 2A AA 0C    	ld hl, (rotateBoard_s + 1)
0963   0669 26 00       	ld h, 0
0964   066B 19          	add hl, de
0965   066C 7E          	ld a, (hl)
0966   066D 32 AC 0C    	ld (rotateBoard_s + 3), a
0967   0670             ; 133 			board[i][j] = board[j][n-i-1];
0968   0670 2A A9 0C    	ld hl, (rotateBoard_s + 0)
0969   0673 26 00       	ld h, 0
0970   0675 EB          	ex hl, de
0971   0676 2A AB 0C    	ld hl, (rotateBoard_s + 2)
0972   0679 26 00       	ld h, 0
0973   067B CD C6 0C    	call __o_sub_16
0974   067E 2B          	dec hl
0975   067F E5          	push hl
0976   0680 2A AA 0C    	ld hl, (rotateBoard_s + 1)
0977   0683 26 00       	ld h, 0
0978   0685 29          	add hl, hl
0979   0686 29          	add hl, hl
0980   0687 11 2A 0C    	ld de, board
0981   068A 19          	add hl, de
0982   068B D1          	pop de
0983   068C 19          	add hl, de
0984   068D 7E          	ld a, (hl)
0985   068E 2A A9 0C    	ld hl, (rotateBoard_s + 0)
0986   0691 26 00       	ld h, 0
0987   0693 29          	add hl, hl
0988   0694 29          	add hl, hl
0989   0695 11 2A 0C    	ld de, board
0990   0698 19          	add hl, de
0991   0699 EB          	ex hl, de
0992   069A 2A AA 0C    	ld hl, (rotateBoard_s + 1)
0993   069D 26 00       	ld h, 0
0994   069F 19          	add hl, de
0995   06A0 77          	ld (hl), a
0996   06A1             ; 134 			board[j][n-i-1] = board[n-i-1][n-j-1];
0997   06A1 2A A9 0C    	ld hl, (rotateBoard_s + 0)
0998   06A4 26 00       	ld h, 0
0999   06A6 EB          	ex hl, de
1000   06A7 2A AB 0C    	ld hl, (rotateBoard_s + 2)
1001   06AA 26 00       	ld h, 0
1002   06AC CD C6 0C    	call __o_sub_16
1003   06AF 2B          	dec hl
1004   06B0 E5          	push hl
1005   06B1 2A AA 0C    	ld hl, (rotateBoard_s + 1)
1006   06B4 26 00       	ld h, 0
1007   06B6 29          	add hl, hl
1008   06B7 29          	add hl, hl
1009   06B8 11 2A 0C    	ld de, board
1010   06BB 19          	add hl, de
1011   06BC D1          	pop de
1012   06BD 19          	add hl, de
1013   06BE E5          	push hl
1014   06BF 2A AA 0C    	ld hl, (rotateBoard_s + 1)
1015   06C2 26 00       	ld h, 0
1016   06C4 EB          	ex hl, de
1017   06C5 2A AB 0C    	ld hl, (rotateBoard_s + 2)
1018   06C8 26 00       	ld h, 0
1019   06CA CD C6 0C    	call __o_sub_16
1020   06CD 2B          	dec hl
1021   06CE E5          	push hl
1022   06CF 2A A9 0C    	ld hl, (rotateBoard_s + 0)
1023   06D2 26 00       	ld h, 0
1024   06D4 EB          	ex hl, de
1025   06D5 2A AB 0C    	ld hl, (rotateBoard_s + 2)
1026   06D8 26 00       	ld h, 0
1027   06DA CD C6 0C    	call __o_sub_16
1028   06DD 2B          	dec hl
1029   06DE 29          	add hl, hl
1030   06DF 29          	add hl, hl
1031   06E0 11 2A 0C    	ld de, board
1032   06E3 19          	add hl, de
1033   06E4 D1          	pop de
1034   06E5 19          	add hl, de
1035   06E6 7E          	ld a, (hl)
1036   06E7 E1          	pop hl
1037   06E8 77          	ld (hl), a
1038   06E9             ; 135 			board[n-i-1][n-j-1] = board[n-j-1][i];
1039   06E9 2A AA 0C    	ld hl, (rotateBoard_s + 1)
1040   06EC 26 00       	ld h, 0
1041   06EE EB          	ex hl, de
1042   06EF 2A AB 0C    	ld hl, (rotateBoard_s + 2)
1043   06F2 26 00       	ld h, 0
1044   06F4 CD C6 0C    	call __o_sub_16
1045   06F7 2B          	dec hl
1046   06F8 E5          	push hl
1047   06F9 2A A9 0C    	ld hl, (rotateBoard_s + 0)
1048   06FC 26 00       	ld h, 0
1049   06FE EB          	ex hl, de
1050   06FF 2A AB 0C    	ld hl, (rotateBoard_s + 2)
1051   0702 26 00       	ld h, 0
1052   0704 CD C6 0C    	call __o_sub_16
1053   0707 2B          	dec hl
1054   0708 29          	add hl, hl
1055   0709 29          	add hl, hl
1056   070A 11 2A 0C    	ld de, board
1057   070D 19          	add hl, de
1058   070E D1          	pop de
1059   070F 19          	add hl, de
1060   0710 E5          	push hl
1061   0711 2A AA 0C    	ld hl, (rotateBoard_s + 1)
1062   0714 26 00       	ld h, 0
1063   0716 EB          	ex hl, de
1064   0717 2A AB 0C    	ld hl, (rotateBoard_s + 2)
1065   071A 26 00       	ld h, 0
1066   071C CD C6 0C    	call __o_sub_16
1067   071F 2B          	dec hl
1068   0720 29          	add hl, hl
1069   0721 29          	add hl, hl
1070   0722 11 2A 0C    	ld de, board
1071   0725 19          	add hl, de
1072   0726 EB          	ex hl, de
1073   0727 2A A9 0C    	ld hl, (rotateBoard_s + 0)
1074   072A 26 00       	ld h, 0
1075   072C 19          	add hl, de
1076   072D 7E          	ld a, (hl)
1077   072E E1          	pop hl
1078   072F 77          	ld (hl), a
1079   0730             ; 136 			board[n-j-1][i] = tmp;
1080   0730 2A AA 0C    	ld hl, (rotateBoard_s + 1)
1081   0733 26 00       	ld h, 0
1082   0735 EB          	ex hl, de
1083   0736 2A AB 0C    	ld hl, (rotateBoard_s + 2)
1084   0739 26 00       	ld h, 0
1085   073B CD C6 0C    	call __o_sub_16
1086   073E 2B          	dec hl
1087   073F 29          	add hl, hl
1088   0740 29          	add hl, hl
1089   0741 11 2A 0C    	ld de, board
1090   0744 19          	add hl, de
1091   0745 EB          	ex hl, de
1092   0746 2A A9 0C    	ld hl, (rotateBoard_s + 0)
1093   0749 26 00       	ld h, 0
1094   074B 19          	add hl, de
1095   074C 3A AC 0C    	ld a, (rotateBoard_s + 3)
1096   074F 77          	ld (hl), a
1097   0750             l_95: 
1098   0750 3A AA 0C    	ld a, (rotateBoard_s + 1)
1099   0753 3C          	inc a
1100   0754 32 AA 0C    	ld (rotateBoard_s + 1), a
1101   0757 C3 3F 06    	jp l_94
1102   075A             l_96: 
1103   075A             l_92: 
1104   075A 3A A9 0C    	ld a, (rotateBoard_s + 0)
1105   075D 3C          	inc a
1106   075E 32 A9 0C    	ld (rotateBoard_s + 0), a
1107   0761 C3 24 06    	jp l_91
1108   0764             slideArray: 
1109   0764             ; 99  slideArray(uint8_t array[SIZE]) {
1110   0764             	; Stack correction reset
1111   0764 22 49 0C    	ld (slideArray_1_a), hl
1112   0767             ; 100 	bool success = false;
1113   0767             ; 24 ;
1114   0767 AF          	xor a
1115   0768 32 AD 0C    	ld (slideArray_s + 0), a
1116   076B             ; 101  x,t,stop=0;
1117   076B 32 B0 0C    	ld (slideArray_s + 3), a
1118   076E             ; 102 
1119   076E             ; 103 	for (x=0;x<SIZE;x++) {
1120   076E 32 AE 0C    	ld (slideArray_s + 1), a
1121   0771             l_97: 
1122   0771 3A AE 0C    	ld a, (slideArray_s + 1)
1123   0774 FE 04       	cp 4
1124   0776 D2 44 08    	jp nc, l_99
1125   0779             ; 104 		if (array[x]!=0) {
1126   0779 2A AE 0C    	ld hl, (slideArray_s + 1)
1127   077C 26 00       	ld h, 0
1128   077E EB          	ex hl, de
1129   077F 2A 49 0C    	ld hl, (slideArray_1_a)
1130   0782 19          	add hl, de
1131   0783 7E          	ld a, (hl)
1132   0784 B7          	or a
1133   0785 CA 3A 08    	jp z, l_100
1134   0788             ; 105 			t = findTarget(array,x,stop);
1135   0788 2A 49 0C    	ld hl, (slideArray_1_a)
1136   078B 22 45 0C    	ld (findTarget_1_a), hl
1137   078E 3A AE 0C    	ld a, (slideArray_s + 1)
1138   0791 32 47 0C    	ld (findTarget_2_a), a
1139   0794 3A B0 0C    	ld a, (slideArray_s + 3)
1140   0797 CD BF 0A    	call findTarget
1141   079A 32 AF 0C    	ld (slideArray_s + 2), a
1142   079D             ; 106 			// if target is not original position, then move or merge
1143   079D             ; 107 			if (t!=x) {
1144   079D 3A AE 0C    	ld a, (slideArray_s + 1)
1145   07A0 21 AF 0C    	ld hl, slideArray_s + 2
1146   07A3 BE          	cp (hl)
1147   07A4 CA 3A 08    	jp z, l_102
1148   07A7             ; 108 				// if target is zero, this is a move
1149   07A7             ; 109 				if (array[t]==0) {
1150   07A7 2A AF 0C    	ld hl, (slideArray_s + 2)
1151   07AA 26 00       	ld h, 0
1152   07AC EB          	ex hl, de
1153   07AD 2A 49 0C    	ld hl, (slideArray_1_a)
1154   07B0 19          	add hl, de
1155   07B1 7E          	ld a, (hl)
1156   07B2 B7          	or a
1157   07B3 C2 CF 07    	jp nz, l_104
1158   07B6             ; 110 					array[t]=array[x];
1159   07B6 2A AE 0C    	ld hl, (slideArray_s + 1)
1160   07B9 26 00       	ld h, 0
1161   07BB EB          	ex hl, de
1162   07BC 2A 49 0C    	ld hl, (slideArray_1_a)
1163   07BF 19          	add hl, de
1164   07C0 7E          	ld a, (hl)
1165   07C1 2A AF 0C    	ld hl, (slideArray_s + 2)
1166   07C4 26 00       	ld h, 0
1167   07C6 EB          	ex hl, de
1168   07C7 2A 49 0C    	ld hl, (slideArray_1_a)
1169   07CA 19          	add hl, de
1170   07CB 77          	ld (hl), a
1171   07CC C3 29 08    	jp l_105
1172   07CF             l_104: 
1173   07CF             ; 111 				} else if (array[t]==array[x]) {
1174   07CF 2A AE 0C    	ld hl, (slideArray_s + 1)
1175   07D2 26 00       	ld h, 0
1176   07D4 EB          	ex hl, de
1177   07D5 2A 49 0C    	ld hl, (slideArray_1_a)
1178   07D8 19          	add hl, de
1179   07D9 7E          	ld a, (hl)
1180   07DA 2A AF 0C    	ld hl, (slideArray_s + 2)
1181   07DD 26 00       	ld h, 0
1182   07DF EB          	ex hl, de
1183   07E0 2A 49 0C    	ld hl, (slideArray_1_a)
1184   07E3 19          	add hl, de
1185   07E4 BE          	cp (hl)
1186   07E5 C2 29 08    	jp nz, l_106
1187   07E8             ; 112 					// merge (increase power of two)
1188   07E8             ; 113 					array[t]++;
1189   07E8 2A AF 0C    	ld hl, (slideArray_s + 2)
1190   07EB 26 00       	ld h, 0
1191   07ED EB          	ex hl, de
1192   07EE 2A 49 0C    	ld hl, (slideArray_1_a)
1193   07F1 19          	add hl, de
1194   07F2 7E          	ld a, (hl)
1195   07F3 3C          	inc a
1196   07F4 77          	ld (hl), a
1197   07F5             ; 114 					// increase score
1198   07F5             ; 115 					score+=(uint32_t)1<<array[t];
1199   07F5 2A 28 0C    	ld hl, (((score) + 2))
1200   07F8 EB          	ex hl, de
1201   07F9 2A 26 0C    	ld hl, (score)
1202   07FC D5          	push de
1203   07FD E5          	push hl
1204   07FE 11 00 00    	ld de, 0
1205   0801 21 01 00    	ld hl, 1
1206   0804 D5          	push de
1207   0805 E5          	push hl
1208   0806 2A AF 0C    	ld hl, (slideArray_s + 2)
1209   0809 26 00       	ld h, 0
1210   080B EB          	ex hl, de
1211   080C 2A 49 0C    	ld hl, (slideArray_1_a)
1212   080F 19          	add hl, de
1213   0810 6E          	ld l, (hl)
1214   0811 11 00 00    	ld de, 0
1215   0814 62          	ld h, d
1216   0815 CD 3F 0D    	call __o_shl_32
1217   0818             	; Stack correction -4
1218   0818 CD 29 0D    	call __o_add_32
1219   081B             	; Stack correction -4
1220   081B 22 26 0C    	ld (score), hl
1221   081E EB          	ex hl, de
1222   081F 22 28 0C    	ld ((score) + 2), hl
1223   0822             ; 116 					// set stop to avoid double merge
1224   0822             ; 117 					stop = t+1;
1225   0822 3A AF 0C    	ld a, (slideArray_s + 2)
1226   0825 3C          	inc a
1227   0826 32 B0 0C    	ld (slideArray_s + 3), a
1228   0829             l_106: 
1229   0829             l_105: 
1230   0829             ; 118 				}
1231   0829             ; 119 				array[x]=0;
1232   0829 2A AE 0C    	ld hl, (slideArray_s + 1)
1233   082C 26 00       	ld h, 0
1234   082E EB          	ex hl, de
1235   082F 2A 49 0C    	ld hl, (slideArray_1_a)
1236   0832 19          	add hl, de
1237   0833 36 00       	ld (hl), 0
1238   0835             ; 120 				success = true;
1239   0835             ; 25 ;
1240   0835 3E 01       	ld a, 1
1241   0837 32 AD 0C    	ld (slideArray_s + 0), a
1242   083A             l_102: 
1243   083A             l_100: 
1244   083A             l_98: 
1245   083A             ; 103 ) {
1246   083A 3A AE 0C    	ld a, (slideArray_s + 1)
1247   083D 3C          	inc a
1248   083E 32 AE 0C    	ld (slideArray_s + 1), a
1249   0841 C3 71 07    	jp l_97
1250   0844             l_99: 
1251   0844             ; 104 		if (array[x]!=0) {
1252   0844             ; 105 			t = findTarget(array,x,stop);
1253   0844             ; 106 			// if target is not original position, then move or merge
1254   0844             ; 107 			if (t!=x) {
1255   0844             ; 108 				// if target is zero, this is a move
1256   0844             ; 109 				if (array[t]==0) {
1257   0844             ; 110 					array[t]=array[x];
1258   0844             ; 111 				} else if (array[t]==array[x]) {
1259   0844             ; 112 					// merge (increase power of two)
1260   0844             ; 113 					array[t]++;
1261   0844             ; 114 					// increase score
1262   0844             ; 115 					score+=(uint32_t)1<<array[t];
1263   0844             ; 116 					// set stop to avoid double merge
1264   0844             ; 117 					stop = t+1;
1265   0844             ; 118 				}
1266   0844             ; 119 				array[x]=0;
1267   0844             ; 120 				success = true;
1268   0844             ; 121 			}
1269   0844             ; 122 		}
1270   0844             ; 123 	}
1271   0844             ; 124 	return success;
1272   0844 3A AD 0C    	ld a, (slideArray_s + 0)
1273   0847 C9          	ret
1274   0848             snprintf: 
1275   0848             ; 38  __stdcall snprintf(char* buffer, size_t buffer_size, const char* format, ...) {
1276   0848 C5          	push bc
1277   0849             	; Stack correction reset
1278   0849             ; 1 /c8080/include/putchar.c
1279   0849 21 0A 00    	ld hl, 10
1280   084C 39          	add hl, sp
1281   084D EB          	ex hl, de
1282   084E 21 00 00    	ld hl, 0
1283   0851 39          	add hl, sp
1284   0852 73          	ld (hl), e
1285   0853 23          	inc hl
1286   0854 72          	ld (hl), d
1287   0855             ; 41 buffer, buffer_size, format, va);
1288   0855 21 04 00    	ld hl, 4
1289   0858 39          	add hl, sp
1290   0859 5E          	ld e, (hl)
1291   085A 23          	inc hl
1292   085B 56          	ld d, (hl)
1293   085C EB          	ex hl, de
1294   085D 22 57 0C    	ld (snprintfInternal_1_a), hl
1295   0860 21 06 00    	ld hl, 6
1296   0863 39          	add hl, sp
1297   0864 5E          	ld e, (hl)
1298   0865 23          	inc hl
1299   0866 56          	ld d, (hl)
1300   0867 EB          	ex hl, de
1301   0868 22 59 0C    	ld (snprintfInternal_2_a), hl
1302   086B 21 08 00    	ld hl, 8
1303   086E 39          	add hl, sp
1304   086F 5E          	ld e, (hl)
1305   0870 23          	inc hl
1306   0871 56          	ld d, (hl)
1307   0872 EB          	ex hl, de
1308   0873 22 5B 0C    	ld (snprintfInternal_3_a), hl
1309   0876 21 00 00    	ld hl, 0
1310   0879 39          	add hl, sp
1311   087A 5E          	ld e, (hl)
1312   087B 23          	inc hl
1313   087C 56          	ld d, (hl)
1314   087D EB          	ex hl, de
1315   087E CD 1B 0B    	call snprintfInternal
1316   0881             ; 42     va_end(va);
1317   0881             ; 43     return printfOutTotal;
1318   0881 2A 41 0C    	ld hl, (printfOutTotal)
1319   0884 C1          	pop bc
1320   0885 C9          	ret
1321   0886             strlen: 
1322   0886             ; 20  __fastcall strlen(const char string[]) {
1323   0886             	; Stack correction reset
1324   0886 22 43 0C    	ld (strlen_1_a), hl
1325   0889             ; 21     (void)string;
1326   0889             
1327   0889 11 FF FF            ld de, -1
1328   088C AF                  xor a
1329   088D             strlen_1: 
1330   088D BE                  cp (hl)
1331   088E 13                  inc de
1332   088F 23                  inc hl
1333   0890 C2 8D 08            jp nz, strlen_1
1334   0893 EB                  ex hl, de
1335   0894                 
1336   0894 C9          	ret
1337   0895             Delay: 
1338   0895             ; 22  Delay(uint16_t n) {
1339   0895             	; Stack correction reset
1340   0895 22 60 0C    	ld (Delay_1_a), hl
1341   0898             l_109: 
1342   0898             ; 23     while (--n != 0) {
1343   0898 2A 60 0C    	ld hl, (Delay_1_a)
1344   089B 2B          	dec hl
1345   089C 22 60 0C    	ld (Delay_1_a), hl
1346   089F 7C          	ld a, h
1347   08A0 B5          	or l
1348   08A1 C2 98 08    	jp nz, l_109
1349   08A4 C9          	ret
1350   08A5             rand: 
1351   08A5             ; 20  __fastcall rand() {
1352   08A5             	; Stack correction reset
1353   08A5             
1354   08A5             rand_seed: 
1355   08A5 3E FA               ld a, 0FAh
1356   08A7 47                  ld b, a
1357   08A8 87                  add a, a
1358   08A9 87                  add a, a
1359   08AA 80                  add a, b
1360   08AB 3C                  inc a
1361   08AC 32 A6 08            ld (rand_seed + 1), a
1362   08AF                 
1363   08AF C9          	ret
1364   08B0             countEmpty: 
1365   08B0             ; 191  countEmpty() {
1366   08B0             	; Stack correction reset
1367   08B0             ; 192 	uint8_t x,y;
1368   08B0             ; 193 	uint8_t count=0;
1369   08B0 AF          	xor a
1370   08B1 32 B3 0C    	ld (countEmpty_s + 2), a
1371   08B4             ; 194 	for (x=0;x<SIZE;x++) {
1372   08B4 32 B1 0C    	ld (countEmpty_s + 0), a
1373   08B7             l_111: 
1374   08B7 3A B1 0C    	ld a, (countEmpty_s + 0)
1375   08BA FE 04       	cp 4
1376   08BC D2 FD 08    	jp nc, l_113
1377   08BF             ; 195 		for (y=0;y<SIZE;y++) {
1378   08BF AF          	xor a
1379   08C0 32 B2 0C    	ld (countEmpty_s + 1), a
1380   08C3             l_114: 
1381   08C3 3A B2 0C    	ld a, (countEmpty_s + 1)
1382   08C6 FE 04       	cp 4
1383   08C8 D2 F3 08    	jp nc, l_116
1384   08CB             ; 196 			if (board[x][y]==0) {
1385   08CB 2A B1 0C    	ld hl, (countEmpty_s + 0)
1386   08CE 26 00       	ld h, 0
1387   08D0 29          	add hl, hl
1388   08D1 29          	add hl, hl
1389   08D2 11 2A 0C    	ld de, board
1390   08D5 19          	add hl, de
1391   08D6 EB          	ex hl, de
1392   08D7 2A B2 0C    	ld hl, (countEmpty_s + 1)
1393   08DA 26 00       	ld h, 0
1394   08DC 19          	add hl, de
1395   08DD 7E          	ld a, (hl)
1396   08DE B7          	or a
1397   08DF C2 E9 08    	jp nz, l_117
1398   08E2             ; 197 				count++;
1399   08E2 3A B3 0C    	ld a, (countEmpty_s + 2)
1400   08E5 3C          	inc a
1401   08E6 32 B3 0C    	ld (countEmpty_s + 2), a
1402   08E9             l_117: 
1403   08E9             l_115: 
1404   08E9 3A B2 0C    	ld a, (countEmpty_s + 1)
1405   08EC 3C          	inc a
1406   08ED 32 B2 0C    	ld (countEmpty_s + 1), a
1407   08F0 C3 C3 08    	jp l_114
1408   08F3             l_116: 
1409   08F3             l_112: 
1410   08F3 3A B1 0C    	ld a, (countEmpty_s + 0)
1411   08F6 3C          	inc a
1412   08F7 32 B1 0C    	ld (countEmpty_s + 0), a
1413   08FA C3 B7 08    	jp l_111
1414   08FD             l_113: 
1415   08FD             ; 198 			}
1416   08FD             ; 199 		}
1417   08FD             ; 200 	}
1418   08FD             ; 201 	return count;
1419   08FD 3A B3 0C    	ld a, (countEmpty_s + 2)
1420   0900 C9          	ret
1421   0901             findPairDown: 
1422   0901             ; 180  findPairDown() {
1423   0901             	; Stack correction reset
1424   0901             ; 181 	bool success = false;
1425   0901             ; 24 ;
1426   0901 AF          	xor a
1427   0902 32 B4 0C    	ld (findPairDown_s + 0), a
1428   0905             ; 183 =0;x<SIZE;x++) {
1429   0905 32 B5 0C    	ld (findPairDown_s + 1), a
1430   0908             l_119: 
1431   0908 3A B5 0C    	ld a, (findPairDown_s + 1)
1432   090B FE 04       	cp 4
1433   090D D2 5D 09    	jp nc, l_121
1434   0910             ; 184 		for (y=0;y<SIZE-1;y++) {
1435   0910 AF          	xor a
1436   0911 32 B6 0C    	ld (findPairDown_s + 2), a
1437   0914             l_122: 
1438   0914 3A B6 0C    	ld a, (findPairDown_s + 2)
1439   0917 FE 03       	cp 3
1440   0919 D2 53 09    	jp nc, l_124
1441   091C             ; 185 			if (board[x][y]==board[x][y+1]) return true;
1442   091C 2A B5 0C    	ld hl, (findPairDown_s + 1)
1443   091F 26 00       	ld h, 0
1444   0921 29          	add hl, hl
1445   0922 29          	add hl, hl
1446   0923 11 2A 0C    	ld de, board
1447   0926 19          	add hl, de
1448   0927 EB          	ex hl, de
1449   0928 2A B6 0C    	ld hl, (findPairDown_s + 2)
1450   092B 26 00       	ld h, 0
1451   092D 23          	inc hl
1452   092E 19          	add hl, de
1453   092F 7E          	ld a, (hl)
1454   0930 2A B5 0C    	ld hl, (findPairDown_s + 1)
1455   0933 26 00       	ld h, 0
1456   0935 29          	add hl, hl
1457   0936 29          	add hl, hl
1458   0937 11 2A 0C    	ld de, board
1459   093A 19          	add hl, de
1460   093B EB          	ex hl, de
1461   093C 2A B6 0C    	ld hl, (findPairDown_s + 2)
1462   093F 26 00       	ld h, 0
1463   0941 19          	add hl, de
1464   0942 BE          	cp (hl)
1465   0943 C2 49 09    	jp nz, l_125
1466   0946             ; 25 ;
1467   0946 3E 01       	ld a, 1
1468   0948 C9          	ret
1469   0949             l_125: 
1470   0949             l_123: 
1471   0949             ; 184 ) {
1472   0949 3A B6 0C    	ld a, (findPairDown_s + 2)
1473   094C 3C          	inc a
1474   094D 32 B6 0C    	ld (findPairDown_s + 2), a
1475   0950 C3 14 09    	jp l_122
1476   0953             l_124: 
1477   0953             l_120: 
1478   0953 3A B5 0C    	ld a, (findPairDown_s + 1)
1479   0956 3C          	inc a
1480   0957 32 B5 0C    	ld (findPairDown_s + 1), a
1481   095A C3 08 09    	jp l_119
1482   095D             l_121: 
1483   095D             ; 185 			if (board[x][y]==board[x][y+1]) return true;
1484   095D             ; 186 		}
1485   095D             ; 187 	}
1486   095D             ; 188 	return success;
1487   095D 3A B4 0C    	ld a, (findPairDown_s + 0)
1488   0960 C9          	ret
1489   0961             printfOutConsole: 
1490   0961             ; 21  __stdcall printfOutConsole(int c) { // TODO: static
1491   0961             	; Stack correction reset
1492   0961             ; 22     printfOutTotal++;
1493   0961 2A 41 0C    	ld hl, (printfOutTotal)
1494   0964 23          	inc hl
1495   0965 22 41 0C    	ld (printfOutTotal), hl
1496   0968             ; 23     return putchar(c);
1497   0968 21 02 00    	ld hl, 2
1498   096B 39          	add hl, sp
1499   096C 5E          	ld e, (hl)
1500   096D 23          	inc hl
1501   096E 56          	ld d, (hl)
1502   096F EB          	ex hl, de
1503   0970 C3 53 0B    	jp putchar
1504   0973             printfInternal: 
1505   0973             ; 46  printfInternal(const char* format, va_list va) {
1506   0973             	; Stack correction reset
1507   0973 22 55 0C    	ld (printfInternal_2_a), hl
1508   0976             ; 47     printfOutTotal = 0;
1509   0976 21 00 00    	ld hl, 0
1510   0979 22 41 0C    	ld (printfOutTotal), hl
1511   097C             l_127: 
1512   097C             ; 48     char buf[UINT16_TO_STRING_SIZE];
1513   097C             ; 49     for (;;) {
1514   097C             ; 50         uint8_t c = *format;
1515   097C 2A 53 0C    	ld hl, (printfInternal_1_a)
1516   097F 7E          	ld a, (hl)
1517   0980 32 BD 0C    	ld (printfInternal_s + 6), a
1518   0983             ; 51         switch (c) {
1519   0983 B7          	or a
1520   0984 C8          	ret z
1521   0985 D6 25       	sub 37
1522   0987 CA 8D 09    	jp z, l_131
1523   098A C3 A7 0A    	jp l_133
1524   098D             l_131: 
1525   098D             ; 52             case 0:
1526   098D             ; 53                 return;
1527   098D             ; 54             case '%':
1528   098D             ; 55                 unsigned width = 0;
1529   098D 21 00 00    	ld hl, 0
1530   0990 22 BE 0C    	ld (printfInternal_s + 7), hl
1531   0993             ; 56                 format++;
1532   0993 2A 53 0C    	ld hl, (printfInternal_1_a)
1533   0996 23          	inc hl
1534   0997 22 53 0C    	ld (printfInternal_1_a), hl
1535   099A             ; 57                 c = *format;
1536   099A 7E          	ld a, (hl)
1537   099B 32 BD 0C    	ld (printfInternal_s + 6), a
1538   099E             ; 58                 if (c == '*') {
1539   099E FE 2A       	cp 42
1540   09A0 C2 C2 09    	jp nz, l_134
1541   09A3             ; 59                     width = va_arg(va, unsigned);
1542   09A3 2A 55 0C    	ld hl, (printfInternal_2_a)
1543   09A6 23          	inc hl
1544   09A7 23          	inc hl
1545   09A8 22 55 0C    	ld (printfInternal_2_a), hl
1546   09AB 2B          	dec hl
1547   09AC 2B          	dec hl
1548   09AD 5E          	ld e, (hl)
1549   09AE 23          	inc hl
1550   09AF 56          	ld d, (hl)
1551   09B0 EB          	ex hl, de
1552   09B1 22 BE 0C    	ld (printfInternal_s + 7), hl
1553   09B4             ; 60 ;
1554   09B4 2A 53 0C    	ld hl, (printfInternal_1_a)
1555   09B7 23          	inc hl
1556   09B8 22 53 0C    	ld (printfInternal_1_a), hl
1557   09BB             ; 61                     c = *format;
1558   09BB 7E          	ld a, (hl)
1559   09BC 32 BD 0C    	ld (printfInternal_s + 6), a
1560   09BF C3 F9 09    	jp l_135
1561   09C2             l_134: 
1562   09C2             l_136: 
1563   09C2             ; 62                 } else {
1564   09C2             ; 63                     while (c >= '0' && c <= '9') {
1565   09C2 3A BD 0C    	ld a, (printfInternal_s + 6)
1566   09C5 FE 30       	cp 48
1567   09C7 DA F9 09    	jp c, l_137
1568   09CA 3E 39       	ld a, 57
1569   09CC 21 BD 0C    	ld hl, printfInternal_s + 6
1570   09CF BE          	cp (hl)
1571   09D0 DA F9 09    	jp c, l_137
1572   09D3             ; 64                         width = width * 10 + (c - '0');
1573   09D3 2A BD 0C    	ld hl, (printfInternal_s + 6)
1574   09D6 26 00       	ld h, 0
1575   09D8 11 D0 FF    	ld de, 65488
1576   09DB 19          	add hl, de
1577   09DC E5          	push hl
1578   09DD 2A BE 0C    	ld hl, (printfInternal_s + 7)
1579   09E0 54          	ld d, h
1580   09E1 5D          	ld e, l
1581   09E2 29          	add hl, hl
1582   09E3 29          	add hl, hl
1583   09E4 19          	add hl, de
1584   09E5 29          	add hl, hl
1585   09E6 D1          	pop de
1586   09E7 19          	add hl, de
1587   09E8 22 BE 0C    	ld (printfInternal_s + 7), hl
1588   09EB             ; 65                         format++;
1589   09EB 2A 53 0C    	ld hl, (printfInternal_1_a)
1590   09EE 23          	inc hl
1591   09EF 22 53 0C    	ld (printfInternal_1_a), hl
1592   09F2             ; 66                         c = *format;
1593   09F2 7E          	ld a, (hl)
1594   09F3 32 BD 0C    	ld (printfInternal_s + 6), a
1595   09F6 C3 C2 09    	jp l_136
1596   09F9             l_137: 
1597   09F9             l_135: 
1598   09F9             ; 67                     }
1599   09F9             ; 68                 }
1600   09F9             ; 69                 switch (c) {
1601   09F9 3A BD 0C    	ld a, (printfInternal_s + 6)
1602   09FC B7          	or a
1603   09FD C8          	ret z
1604   09FE D6 64       	sub 100
1605   0A00 CA 15 0A    	jp z, l_141
1606   0A03 D6 05       	sub 5
1607   0A05 CA 15 0A    	jp z, l_140
1608   0A08 D6 0A       	sub 10
1609   0A0A CA 7A 0A    	jp z, l_139
1610   0A0D D6 02       	sub 2
1611   0A0F CA 15 0A    	jp z, l_142
1612   0A12 C3 B4 0A    	jp l_130
1613   0A15             l_142: 
1614   0A15             l_141: 
1615   0A15             l_140: 
1616   0A15             ; 70                     case 0:
1617   0A15             ; 71                         return;
1618   0A15             ; 72                     case 'u':
1619   0A15             ; 73                     case 'd':
1620   0A15             ; 74                     case 'i': {
1621   0A15             ; 75                         unsigned i = va_arg(va, unsigned);
1622   0A15 2A 55 0C    	ld hl, (printfInternal_2_a)
1623   0A18 23          	inc hl
1624   0A19 23          	inc hl
1625   0A1A 22 55 0C    	ld (printfInternal_2_a), hl
1626   0A1D 2B          	dec hl
1627   0A1E 2B          	dec hl
1628   0A1F 5E          	ld e, (hl)
1629   0A20 23          	inc hl
1630   0A21 56          	ld d, (hl)
1631   0A22 EB          	ex hl, de
1632   0A23 22 C0 0C    	ld (printfInternal_s + 9), hl
1633   0A26             ; 76  != 'u' && (int16_t)i < 0) {
1634   0A26 3A BD 0C    	ld a, (printfInternal_s + 6)
1635   0A29 FE 75       	cp 117
1636   0A2B CA 4F 0A    	jp z, l_144
1637   0A2E 11 00 00    	ld de, 0
1638   0A31 CD C6 0C    	call __o_sub_16
1639   0A34 F2 4F 0A    	jp p, l_144
1640   0A37             ; 77                             printfOut('-');
1641   0A37 21 2D 00    	ld hl, 45
1642   0A3A E5          	push hl
1643   0A3B 2A 3B 0C    	ld hl, (printfOut)
1644   0A3E CD 3E 0D    	call __o_call_hl
1645   0A41 C1          	pop bc
1646   0A42             ; 78                             i = 0 - i;
1647   0A42 2A C0 0C    	ld hl, (printfInternal_s + 9)
1648   0A45 11 00 00    	ld de, 0
1649   0A48 EB          	ex hl, de
1650   0A49 CD C6 0C    	call __o_sub_16
1651   0A4C 22 C0 0C    	ld (printfInternal_s + 9), hl
1652   0A4F             l_144: 
1653   0A4F             ; 79                         }
1654   0A4F             ; 80                         char* text = Uint16ToString(buf, (uint16_t)i);
1655   0A4F 21 B7 0C    	ld hl, printfInternal_s + 0
1656   0A52 22 68 0C    	ld (Uint16ToString_1_a), hl
1657   0A55 2A C0 0C    	ld hl, (printfInternal_s + 9)
1658   0A58 CD 6E 0B    	call Uint16ToString
1659   0A5B 22 C2 0C    	ld (printfInternal_s + 11), hl
1660   0A5E             ; 81                         printSpaces(width, &buf[UINT16_TO_STRING_SIZE] - text);
1661   0A5E 2A BE 0C    	ld hl, (printfInternal_s + 7)
1662   0A61 22 64 0C    	ld (printSpaces_1_a), hl
1663   0A64 2A C2 0C    	ld hl, (printfInternal_s + 11)
1664   0A67 11 BD 0C    	ld de, (printfInternal_s + 0) + (6)
1665   0A6A EB          	ex hl, de
1666   0A6B CD C6 0C    	call __o_sub_16
1667   0A6E CD A2 0B    	call printSpaces
1668   0A71             ; 82                         printfText(text);
1669   0A71 2A C2 0C    	ld hl, (printfInternal_s + 11)
1670   0A74 CD D8 0B    	call printfText
1671   0A77 C3 B4 0A    	jp l_130
1672   0A7A             l_139: 
1673   0A7A             ; 83                         break;
1674   0A7A             ; 84                     }
1675   0A7A             ; 85                     case 's': {
1676   0A7A             ; 86                         uint16_t prevTotal = printfOutTotal;
1677   0A7A 2A 41 0C    	ld hl, (printfOutTotal)
1678   0A7D 22 C0 0C    	ld (printfInternal_s + 9), hl
1679   0A80             ; 87                         printfText(va_arg(va, char*));
1680   0A80 2A 55 0C    	ld hl, (printfInternal_2_a)
1681   0A83 23          	inc hl
1682   0A84 23          	inc hl
1683   0A85 22 55 0C    	ld (printfInternal_2_a), hl
1684   0A88 2B          	dec hl
1685   0A89 2B          	dec hl
1686   0A8A 5E          	ld e, (hl)
1687   0A8B 23          	inc hl
1688   0A8C 56          	ld d, (hl)
1689   0A8D EB          	ex hl, de
1690   0A8E CD D8 0B    	call printfText
1691   0A91             ; 88 width, printfOutTotal - prevTotal);
1692   0A91 2A BE 0C    	ld hl, (printfInternal_s + 7)
1693   0A94 22 64 0C    	ld (printSpaces_1_a), hl
1694   0A97 2A C0 0C    	ld hl, (printfInternal_s + 9)
1695   0A9A EB          	ex hl, de
1696   0A9B 2A 41 0C    	ld hl, (printfOutTotal)
1697   0A9E CD C6 0C    	call __o_sub_16
1698   0AA1 CD A2 0B    	call printSpaces
1699   0AA4 C3 B4 0A    	jp l_130
1700   0AA7             l_133: 
1701   0AA7             ; 89                         break;
1702   0AA7             ; 90                     }
1703   0AA7             ; 91                 }
1704   0AA7             ; 92                 break;
1705   0AA7             ; 93             default:
1706   0AA7             ; 94                 printfOut(c);
1707   0AA7 2A BD 0C    	ld hl, (printfInternal_s + 6)
1708   0AAA 26 00       	ld h, 0
1709   0AAC E5          	push hl
1710   0AAD 2A 3B 0C    	ld hl, (printfOut)
1711   0AB0 CD 3E 0D    	call __o_call_hl
1712   0AB3 C1          	pop bc
1713   0AB4             l_130: 
1714   0AB4             ; 95         }
1715   0AB4             ; 96         format++;
1716   0AB4 2A 53 0C    	ld hl, (printfInternal_1_a)
1717   0AB7 23          	inc hl
1718   0AB8 22 53 0C    	ld (printfInternal_1_a), hl
1719   0ABB             l_128: 
1720   0ABB C3 7C 09    	jp l_127
1721   0ABE             l_129: 
1722   0ABE C9          	ret
1723   0ABF             findTarget: 
1724   0ABF             ; 75  findTarget(uint8_t array[SIZE],uint8_t x,uint8_t stop) {
1725   0ABF             	; Stack correction reset
1726   0ABF 32 48 0C    	ld (findTarget_3_a), a
1727   0AC2             ; 76 	uint8_t t;
1728   0AC2             ; 77 	// if the position is already on the first, don't evaluate
1729   0AC2             ; 78 	if (x==0) {
1730   0AC2 3A 47 0C    	ld a, (findTarget_2_a)
1731   0AC5 B7          	or a
1732   0AC6 C2 CA 0A    	jp nz, l_146
1733   0AC9             ; 79 		return x;
1734   0AC9 C9          	ret
1735   0ACA             l_146: 
1736   0ACA             ; 80 	}
1737   0ACA             ; 81 	for(t=x-1;;t--) {
1738   0ACA 3D          	dec a
1739   0ACB 32 C4 0C    	ld (findTarget_s + 0), a
1740   0ACE             l_148: 
1741   0ACE             ; 82 		if (array[t]!=0) {
1742   0ACE 2A C4 0C    	ld hl, (findTarget_s + 0)
1743   0AD1 26 00       	ld h, 0
1744   0AD3 EB          	ex hl, de
1745   0AD4 2A 45 0C    	ld hl, (findTarget_1_a)
1746   0AD7 19          	add hl, de
1747   0AD8 7E          	ld a, (hl)
1748   0AD9 B7          	or a
1749   0ADA CA FF 0A    	jp z, l_151
1750   0ADD             ; 83 			if (array[t]!=array[x]) {
1751   0ADD 2A 47 0C    	ld hl, (findTarget_2_a)
1752   0AE0 26 00       	ld h, 0
1753   0AE2 EB          	ex hl, de
1754   0AE3 2A 45 0C    	ld hl, (findTarget_1_a)
1755   0AE6 19          	add hl, de
1756   0AE7 7E          	ld a, (hl)
1757   0AE8 2A C4 0C    	ld hl, (findTarget_s + 0)
1758   0AEB 26 00       	ld h, 0
1759   0AED EB          	ex hl, de
1760   0AEE 2A 45 0C    	ld hl, (findTarget_1_a)
1761   0AF1 19          	add hl, de
1762   0AF2 BE          	cp (hl)
1763   0AF3 CA FB 0A    	jp z, l_153
1764   0AF6             ; 84 				// merge is not possible, take next position
1765   0AF6             ; 85 				return t+1;
1766   0AF6 3A C4 0C    	ld a, (findTarget_s + 0)
1767   0AF9 3C          	inc a
1768   0AFA C9          	ret
1769   0AFB             l_153: 
1770   0AFB             ; 86 			}
1771   0AFB             ; 87 			return t;
1772   0AFB 3A C4 0C    	ld a, (findTarget_s + 0)
1773   0AFE C9          	ret
1774   0AFF             l_151: 
1775   0AFF             ; 88 		} else {
1776   0AFF             ; 89 			// we should not slide further, return this one
1777   0AFF             ; 90 			if (t==stop) {
1778   0AFF 3A 48 0C    	ld a, (findTarget_3_a)
1779   0B02 21 C4 0C    	ld hl, findTarget_s + 0
1780   0B05 BE          	cp (hl)
1781   0B06 C2 0D 0B    	jp nz, l_155
1782   0B09             ; 91 				return t;
1783   0B09 3A C4 0C    	ld a, (findTarget_s + 0)
1784   0B0C C9          	ret
1785   0B0D             l_155: 
1786   0B0D             l_149: 
1787   0B0D 3A C4 0C    	ld a, (findTarget_s + 0)
1788   0B10 3D          	dec a
1789   0B11 32 C4 0C    	ld (findTarget_s + 0), a
1790   0B14 C3 CE 0A    	jp l_148
1791   0B17             l_150: 
1792   0B17             ; 92 			}
1793   0B17             ; 93 		}
1794   0B17             ; 94 	}
1795   0B17             ; 95 	// we did not find a
1796   0B17             ; 96 	return x;
1797   0B17 3A 47 0C    	ld a, (findTarget_2_a)
1798   0B1A C9          	ret
1799   0B1B             snprintfInternal: 
1800   0B1B             ; 29  void snprintfInternal(char* buffer, size_t buffer_size, const char* format, va_list va) {
1801   0B1B             	; Stack correction reset
1802   0B1B 22 5D 0C    	ld (snprintfInternal_4_a), hl
1803   0B1E             ; 30     printfOut = printfOutString;
1804   0B1E 21 FB 0B    	ld hl, printfOutString
1805   0B21 22 3B 0C    	ld (printfOut), hl
1806   0B24             ; 31     if (buffer_size > 0) buffer_size--;
1807   0B24 2A 59 0C    	ld hl, (snprintfInternal_2_a)
1808   0B27 7C          	ld a, h
1809   0B28 B5          	or l
1810   0B29 CA 30 0B    	jp z, l_157
1811   0B2C 2B          	dec hl
1812   0B2D 22 59 0C    	ld (snprintfInternal_2_a), hl
1813   0B30             l_157: 
1814   0B30             ; 32     printfOutPointer = buffer;
1815   0B30 2A 57 0C    	ld hl, (snprintfInternal_1_a)
1816   0B33 22 3D 0C    	ld (printfOutPointer), hl
1817   0B36             ; 33     printfOutEnd = buffer + buffer_size;
1818   0B36 2A 59 0C    	ld hl, (snprintfInternal_2_a)
1819   0B39 EB          	ex hl, de
1820   0B3A 2A 57 0C    	ld hl, (snprintfInternal_1_a)
1821   0B3D 19          	add hl, de
1822   0B3E 22 3F 0C    	ld (printfOutEnd), hl
1823   0B41             ; 34     printfInternal(format, va);
1824   0B41 2A 5B 0C    	ld hl, (snprintfInternal_3_a)
1825   0B44 22 53 0C    	ld (printfInternal_1_a), hl
1826   0B47 2A 5D 0C    	ld hl, (snprintfInternal_4_a)
1827   0B4A CD 73 09    	call printfInternal
1828   0B4D             ; 35     *printfOutPointer = 0;
1829   0B4D 2A 3D 0C    	ld hl, (printfOutPointer)
1830   0B50 36 00       	ld (hl), 0
1831   0B52 C9          	ret
1832   0B53             putchar: 
1833   0B53             ; 45  __fastcall putchar(int c) {
1834   0B53             	; Stack correction reset
1835   0B53 22 51 0C    	ld (putchar_1_a), hl
1836   0B56             ; 46     if (c == 0x0A) cpmBiosConOut(0x0D);
1837   0B56 11 0A 00    	ld de, 10
1838   0B59 CD CD 0C    	call __o_cmp_16
1839   0B5C C2 64 0B    	jp nz, l_159
1840   0B5F 3E 0D       	ld a, 13
1841   0B61 CD 1B 0C    	call cpmBiosConOut
1842   0B64             l_159: 
1843   0B64             ; 47     cpmBiosConOut(c);
1844   0B64 3A 51 0C    	ld a, (putchar_1_a)
1845   0B67 CD 1B 0C    	call cpmBiosConOut
1846   0B6A             ; 48     return 0;
1847   0B6A 21 00 00    	ld hl, 0
1848   0B6D C9          	ret
1849   0B6E             Uint16ToString: 
1850   0B6E             ; 21 * Uint16ToString(char* outputBuffer, uint16_t value) {
1851   0B6E             	; Stack correction reset
1852   0B6E 22 6A 0C    	ld (Uint16ToString_2_a), hl
1853   0B71             ; 22     outputBuffer += UINT16_TO_STRING_SIZE - 1;
1854   0B71 2A 68 0C    	ld hl, (Uint16ToString_1_a)
1855   0B74 11 05 00    	ld de, 5
1856   0B77 19          	add hl, de
1857   0B78 22 68 0C    	ld (Uint16ToString_1_a), hl
1858   0B7B             ; 23     *outputBuffer = 0;
1859   0B7B 36 00       	ld (hl), 0
1860   0B7D             l_161: 
1861   0B7D             ; 24     do {
1862   0B7D             ; 25         value /= 10;
1863   0B7D 2A 6A 0C    	ld hl, (Uint16ToString_2_a)
1864   0B80 11 0A 00    	ld de, 10
1865   0B83 CD D3 0C    	call __o_div_u16
1866   0B86 22 6A 0C    	ld (Uint16ToString_2_a), hl
1867   0B89             ; 26         --outputBuffer;
1868   0B89 2A 68 0C    	ld hl, (Uint16ToString_1_a)
1869   0B8C 2B          	dec hl
1870   0B8D 22 68 0C    	ld (Uint16ToString_1_a), hl
1871   0B90             ; 27         *outputBuffer = (uint8_t)__div_16_mod + '0';
1872   0B90 3A 5E 0D    	ld a, (__div_16_mod)
1873   0B93 C6 30       	add 48
1874   0B95 77          	ld (hl), a
1875   0B96             l_162: 
1876   0B96             ; 28     } while (value != 0);
1877   0B96 2A 6A 0C    	ld hl, (Uint16ToString_2_a)
1878   0B99 7C          	ld a, h
1879   0B9A B5          	or l
1880   0B9B C2 7D 0B    	jp nz, l_161
1881   0B9E             l_163: 
1882   0B9E             ; 29     return outputBuffer;
1883   0B9E 2A 68 0C    	ld hl, (Uint16ToString_1_a)
1884   0BA1 C9          	ret
1885   0BA2             printSpaces: 
1886   0BA2             ; 37  void printSpaces(unsigned need, unsigned ready) {
1887   0BA2             	; Stack correction reset
1888   0BA2 22 66 0C    	ld (printSpaces_2_a), hl
1889   0BA5             ; 38     if (ready >= need) return;
1890   0BA5 2A 64 0C    	ld hl, (printSpaces_1_a)
1891   0BA8 EB          	ex hl, de
1892   0BA9 2A 66 0C    	ld hl, (printSpaces_2_a)
1893   0BAC CD C6 0C    	call __o_sub_16
1894   0BAF D0          	ret nc
1895   0BB0             ; 39     need -= ready;
1896   0BB0 2A 66 0C    	ld hl, (printSpaces_2_a)
1897   0BB3 EB          	ex hl, de
1898   0BB4 2A 64 0C    	ld hl, (printSpaces_1_a)
1899   0BB7 CD C6 0C    	call __o_sub_16
1900   0BBA 22 64 0C    	ld (printSpaces_1_a), hl
1901   0BBD             l_166: 
1902   0BBD             ; 40     do {
1903   0BBD             ; 41         printfOut(' ');
1904   0BBD 21 20 00    	ld hl, 32
1905   0BC0 E5          	push hl
1906   0BC1 2A 3B 0C    	ld hl, (printfOut)
1907   0BC4 CD 3E 0D    	call __o_call_hl
1908   0BC7 C1          	pop bc
1909   0BC8             ; 42         need--;
1910   0BC8 2A 64 0C    	ld hl, (printSpaces_1_a)
1911   0BCB 2B          	dec hl
1912   0BCC 22 64 0C    	ld (printSpaces_1_a), hl
1913   0BCF             l_167: 
1914   0BCF             ; 43     } while(need != 0);
1915   0BCF 2A 64 0C    	ld hl, (printSpaces_1_a)
1916   0BD2 7C          	ld a, h
1917   0BD3 B5          	or l
1918   0BD4 C2 BD 0B    	jp nz, l_166
1919   0BD7             l_168: 
1920   0BD7 C9          	ret
1921   0BD8             printfText: 
1922   0BD8             ; 28  printfText(const char *text) {
1923   0BD8             	; Stack correction reset
1924   0BD8 22 62 0C    	ld (printfText_1_a), hl
1925   0BDB             l_169: 
1926   0BDB             ; 29     for (;;) {
1927   0BDB             ; 30         uint8_t c = *text;
1928   0BDB 2A 62 0C    	ld hl, (printfText_1_a)
1929   0BDE 7E          	ld a, (hl)
1930   0BDF 32 C5 0C    	ld (printfText_s + 0), a
1931   0BE2             ; 31         if (c == 0) break;
1932   0BE2 B7          	or a
1933   0BE3 C8          	ret z
1934   0BE4             ; 32         printfOut(c);
1935   0BE4 2A C5 0C    	ld hl, (printfText_s + 0)
1936   0BE7 26 00       	ld h, 0
1937   0BE9 E5          	push hl
1938   0BEA 2A 3B 0C    	ld hl, (printfOut)
1939   0BED CD 3E 0D    	call __o_call_hl
1940   0BF0 C1          	pop bc
1941   0BF1             ; 33         text++;
1942   0BF1 2A 62 0C    	ld hl, (printfText_1_a)
1943   0BF4 23          	inc hl
1944   0BF5 22 62 0C    	ld (printfText_1_a), hl
1945   0BF8             l_170: 
1946   0BF8 C3 DB 0B    	jp l_169
1947   0BFB             printfOutString: 
1948   0BFB             ; 21  __stdcall printfOutString(int c) { // TODO: static
1949   0BFB             	; Stack correction reset
1950   0BFB             ; 22     printfOutTotal++;
1951   0BFB 2A 41 0C    	ld hl, (printfOutTotal)
1952   0BFE 23          	inc hl
1953   0BFF 22 41 0C    	ld (printfOutTotal), hl
1954   0C02             ; 23     if (printfOutPointer != printfOutEnd) {
1955   0C02 2A 3F 0C    	ld hl, (printfOutEnd)
1956   0C05 EB          	ex hl, de
1957   0C06 2A 3D 0C    	ld hl, (printfOutPointer)
1958   0C09 CD CD 0C    	call __o_cmp_16
1959   0C0C C8          	ret z
1960   0C0D             ; 24         *printfOutPointer = c;
1961   0C0D 21 02 00    	ld hl, 2
1962   0C10 39          	add hl, sp
1963   0C11 7E          	ld a, (hl)
1964   0C12 2A 3D 0C    	ld hl, (printfOutPointer)
1965   0C15 77          	ld (hl), a
1966   0C16             ; 25         printfOutPointer++;
1967   0C16 23          	inc hl
1968   0C17 22 3D 0C    	ld (printfOutPointer), hl
1969   0C1A C9          	ret
1970   0C1B             cpmBiosConOut: 
1971   0C1B             ; 36  void __fastcall cpmBiosConOut(uint8_t c) {
1972   0C1B             	; Stack correction reset
1973   0C1B 32 5F 0C    	ld (cpmBiosConOut_1_a), a
1974   0C1E             
1975   0C1E 4F                  ld c, a
1976   0C1F 2A 01 00            ld hl, (1)
1977   0C22 2E 0C               ld l, 0Ch
1978   0C24 E9                  jp hl
1979   0C25                 
1980   0C25 C9          	ret
1981   0C26             score: 
1982   0C26 00 00 00 00 	dd 0
1983   0C2A             board: 
1984   0C2A 00          	ds 16
1985   0C3A             initialized: 
1986   0C3A 00          	db 0
1987   0C3B             printfOut: 
1988   0C3B 00          	ds 2
1989   0C3D             printfOutPointer: 
1990   0C3D 00          	ds 2
1991   0C3F             printfOutEnd: 
1992   0C3F 00          	ds 2
1993   0C41             printfOutTotal: 
1994   0C41 00          	ds 2
1995   0C43             strlen_1_a: 
1996   0C43 00          	ds 2
1997   0C45             findTarget_1_a: 
1998   0C45 00          	ds 2
1999   0C47             findTarget_2_a: 
2000   0C47 00          	ds 1
2001   0C48             findTarget_3_a: 
2002   0C48 00          	ds 1
2003   0C49             slideArray_1_a: 
2004   0C49 00          	ds 2
2005   0C4B             main_1_a: 
2006   0C4B 00          	ds 2
2007   0C4D             main_2_a: 
2008   0C4D 00          	ds 2
2009   0C4F             sleep_1_a: 
2010   0C4F 00          	ds 2
2011   0C51             putchar_1_a: 
2012   0C51 00          	ds 2
2013   0C53             printfInternal_1_a: 
2014   0C53 00          	ds 2
2015   0C55             printfInternal_2_a: 
2016   0C55 00          	ds 2
2017   0C57             snprintfInternal_1_a: 
2018   0C57 00          	ds 2
2019   0C59             snprintfInternal_2_a: 
2020   0C59 00          	ds 2
2021   0C5B             snprintfInternal_3_a: 
2022   0C5B 00          	ds 2
2023   0C5D             snprintfInternal_4_a: 
2024   0C5D 00          	ds 2
2025   0C5F             cpmBiosConOut_1_a: 
2026   0C5F 00          	ds 1
2027   0C60             Delay_1_a: 
2028   0C60 00          	ds 2
2029   0C62             printfText_1_a: 
2030   0C62 00          	ds 2
2031   0C64             printSpaces_1_a: 
2032   0C64 00          	ds 2
2033   0C66             printSpaces_2_a: 
2034   0C66 00          	ds 2
2035   0C68             Uint16ToString_1_a: 
2036   0C68 00          	ds 2
2037   0C6A             Uint16ToString_2_a: 
2038   0C6A 00          	ds 2
2039   0C6C             main_s: 
2040   0C6C 00          	ds 2
2041   0C6E             initBoard_s: 
2042   0C6E 00          	ds 2
2043   0C70             moveLeft_s: 
2044   0C70 00          	ds 1
2045   0C71             moveRight_s: 
2046   0C71 00          	ds 1
2047   0C72             moveUp_s: 
2048   0C72 00          	ds 2
2049   0C74             moveDown_s: 
2050   0C74 00          	ds 1
2051   0C75             drawBoard_s: 
2052   0C75 00          	ds 11
2053   0C80             addRandom_s: 
2054   0C80 00          	ds 37
2055   0CA5             gameEnded_s: 
2056   0CA5 00          	ds 1
2057   0CA6             prepareScreen_s: 
2058   0CA6 00          	ds 3
2059   0CA9             rotateBoard_s: 
2060   0CA9 00          	ds 4
2061   0CAD             slideArray_s: 
2062   0CAD 00          	ds 4
2063   0CB1             countEmpty_s: 
2064   0CB1 00          	ds 3
2065   0CB4             findPairDown_s: 
2066   0CB4 00          	ds 3
2067   0CB7             printfInternal_s: 
2068   0CB7 00          	ds 13
2069   0CC4             findTarget_s: 
2070   0CC4 00          	ds 1
2071   0CC5             printfText_s: 
2072   0CC5 00          	ds 1
2073   0CC6             __o_sub_16: 
2074   0CC6 7D              ld a, l
2075   0CC7 93              sub e
2076   0CC8 6F              ld l, a
2077   0CC9 7C              ld a, h
2078   0CCA 9A              sbc d
2079   0CCB 67              ld h, a
2080   0CCC C9              ret
2081   0CCD             __o_cmp_16: 
2082   0CCD 7C              ld a, h
2083   0CCE BA              cp d
2084   0CCF C0              ret nz
2085   0CD0 7D              ld a, l
2086   0CD1 BB              cp e
2087   0CD2 C9              ret
2088   0CD3             __o_div_u16: 
2089   0CD3 C5              push bc
2090   0CD4 EB              ex hl, de
2091   0CD5 CD DF 0C        call __o_div_u16__l0
2092   0CD8 EB              ex hl, de
2093   0CD9 22 5E 0D        ld (__div_16_mod), hl
2094   0CDC EB              ex hl, de
2095   0CDD C1              pop bc
2096   0CDE C9              ret
2097   0CDF             
2098   0CDF             __o_div_u16__l0: 
2099   0CDF             __o_div_u16__l: 
2100   0CDF 7C              ld a, h
2101   0CE0 B5              or l
2102   0CE1 C8              ret z
2103   0CE2 01 00 00        ld bc, 0
2104   0CE5 C5              push bc
2105   0CE6             __o_div_u16__l1: 
2106   0CE6 7B              ld a, e
2107   0CE7 95              sub l
2108   0CE8 7A              ld a, d
2109   0CE9 9C              sbc h
2110   0CEA DA F2 0C        jp c, __o_div_u16__l2
2111   0CED E5              push hl
2112   0CEE 29              add hl, hl
2113   0CEF D2 E6 0C        jp nc, __o_div_u16__l1
2114   0CF2             __o_div_u16__l2: 
2115   0CF2 21 00 00        ld hl, 0
2116   0CF5             __o_div_u16__l3: 
2117   0CF5 C1              pop bc
2118   0CF6 78              ld a, b
2119   0CF7 B1              or c
2120   0CF8 C8              ret z
2121   0CF9 29              add hl, hl
2122   0CFA D5              push de
2123   0CFB 7B              ld a, e
2124   0CFC 91              sub c
2125   0CFD 5F              ld e, a
2126   0CFE 7A              ld a, d
2127   0CFF 98              sbc b
2128   0D00 57              ld d, a
2129   0D01 DA 09 0D        jp c, __o_div_u16__l4
2130   0D04 23              inc hl
2131   0D05 C1              pop bc
2132   0D06 C3 F5 0C        jp __o_div_u16__l3
2133   0D09             __o_div_u16__l4: 
2134   0D09 D1              pop de
2135   0D0A C3 F5 0C        jp __o_div_u16__l3
2136   0D0D             __o_mod_u16: 
2137   0D0D C5              push bc
2138   0D0E EB              ex hl, de
2139   0D0F CD DF 0C        call __o_div_u16__l0
2140   0D12 EB              ex hl, de
2141   0D13 C1              pop bc
2142   0D14 C9              ret
2143   0D15             __o_shl_16: 
2144   0D15 1C              inc e
2145   0D16             __o_shl_16__l1: 
2146   0D16 1D              dec e
2147   0D17 C8              ret z
2148   0D18 29              add hl, hl
2149   0D19 C3 16 0D        jp __o_shl_16__l1
2150   0D1C             __o_shr_u16: 
2151   0D1C 1C              inc e
2152   0D1D             __o_shr_u16__l1: 
2153   0D1D 1D              dec e
2154   0D1E C8              ret z
2155   0D1F 7C              ld a, h
2156   0D20 B7              or a  ; cf = 0
2157   0D21 1F              rra
2158   0D22 67              ld h, a
2159   0D23 7D              ld a, l
2160   0D24 1F              rra
2161   0D25 6F              ld l, a
2162   0D26 C3 1D 0D        jp __o_shr_u16__l1
2163   0D29             ; Input: de:hl - value 1, stack - 32 bit value 2
2164   0D29             ; Output: de:hl - result
2165   0D29             
2166   0D29             __o_add_32: 
2167   0D29 44 4D           ld bc, hl ; bc = v1l
2168   0D2B E1              pop hl ; hl = ret, stack = v2l
2169   0D2C E3              ex (sp), hl ; hl = v2l, stack = ret
2170   0D2D 79              ld a, c
2171   0D2E 85              add l
2172   0D2F 4F              ld c, a
2173   0D30 78              ld a, b
2174   0D31 8C              adc h
2175   0D32 47              ld b, a ; bc - result
2176   0D33 E1              pop hl ; hl = ret, stack = v2h
2177   0D34 E3              ex (sp), hl ; hl = v2h, stack = ret
2178   0D35 7B              ld a, e
2179   0D36 8D              adc l
2180   0D37 5F              ld e, a
2181   0D38 7A              ld a, d
2182   0D39 8C              adc h
2183   0D3A 57              ld d, a ; de - result
2184   0D3B 60 69           ld hl, bc
2185   0D3D C9              ret
2186   0D3E             __o_call_hl: 
2187   0D3E E9              jp hl
2188   0D3F             ; Input: de:hl - value 1, stack - 32 bit value 2
2189   0D3F             ; Output: de:hl - result
2190   0D3F             
2191   0D3F             __o_shl_32: 
2192   0D3F 44 4D           ld bc, hl ; bc = v1l
2193   0D41 E1              pop hl ; hl = ret, stack = v2l
2194   0D42 E3              ex (sp), hl ; hl = v2l, stack = ret
2195   0D43 7D              ld a, l
2196   0D44 E6 1F           and 31
2197   0D46 CA 59 0D        jp z, __o_shl_32_ret
2198   0D49             __o_shl_32_1: 
2199   0D49 EB              ex hl, de ; de <<= 1
2200   0D4A 29              add hl, hl
2201   0D4B EB              ex hl, de
2202   0D4C 60 69           ld hl, bc ; bc <<= 1
2203   0D4E 29              add hl, hl
2204   0D4F 44 4D           ld bc, hl
2205   0D51 C2 55 0D        jp nz, __o_shl_32_2 ; if (flag_c) de++;
2206   0D54 13              inc de
2207   0D55             __o_shl_32_2: 
2208   0D55 3D              dec a
2209   0D56 C2 49 0D        jp nz, __o_shl_32_1
2210   0D59             __o_shl_32_ret: 
2211   0D59 E1              pop hl ; hl = ret, stack = v2ha
2212   0D5A E3              ex (sp), hl ; hl = v2h, stack = ret
2213   0D5B 60 69           ld hl, bc
2214   0D5D E9              jp hl
2215   0D5E             __div_16_mod: 
2216   0D5E 00          	ds 2
2217   0D60 00          s_5:  db 0
2218   0D61 0A0A0A0A00  s_2:  db 10, 10, 10, 10, 0
2219   0D66             s_12:  db 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 44, 97, 44, 115, 44, 100, 32, 111, 114, 32, 114, 44, 113, 32, 32, 32, 32, 32, 32, 32, 10, 0
2219   0D66 0A20202020202020202020772C612C732C64206F7220722C7120202020202020
2219   0D86 0A00
2220   0D88 1B 5B 48 00 s_0:  db 27, 91, 72, 0
2221   0D8C             s_7:  db 27, 91, 72, 27, 91, 50, 74, 0
2221   0D8C 1B5B481B5B324A00
2222   0D94             s_18:  db 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 71, 65, 77, 69, 32, 79, 86, 69, 82, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 0
2222   0D94 20202020202020202020202047414D45204F564552202020202020202020200A
2222   0DB4 00
2223   0DB5             s_19:  db 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 81, 85, 73, 84, 63, 32, 40, 121, 47, 110, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 0
2223   0DB5 202020202020202020202020515549543F2028792F6E29202020202020202020
2223   0DD5 0A00
2224   0DD7             s_20:  db 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 82, 69, 83, 84, 65, 82, 84, 63, 32, 40, 121, 47, 110, 41, 32, 32, 32, 32, 32, 32, 32, 10, 0
2224   0DD7 20202020202020202020524553544152543F2028792F6E29202020202020200A
2224   0DF7 00
2225   0DF8 25 75 00    s_3:  db 37, 117, 0
2226   0DFB 2B 0A 00    s_10:  db 43, 10, 0
2227   0DFE             s_9:  db 43, 45, 45, 45, 45, 45, 45, 45, 0
2227   0DFE 2B2D2D2D2D2D2D2D00
2228   0E07             s_8:  db 50, 48, 52, 56, 46, 99, 32, 37, 49, 55, 100, 32, 112, 116, 115, 10, 10, 0
2228   0E07 323034382E632025313764207074730A0A00
2229   0E19             s_1:  db 50, 48, 52, 56, 46, 99, 32, 37, 50, 51, 100, 32, 112, 116, 115, 0
2229   0E19 323034382E6320253233642070747300
2230   0E29 7C 0A 00    s_11:  db 124, 10, 0
2231   0E2C             s_6:  db 124, 32, 32, 32, 32, 32, 32, 32, 0
2231   0E2C 7C2020202020202000
2232   0E35             s_4:  db 124, 37, 42, 115, 37, 115, 37, 42, 115, 0
2232   0E35 7C252A732573252A7300
2233   0E3F             end: 
2234   0E3F                 savebin 'output.com', begin, end - begin
2235   0E3F             
